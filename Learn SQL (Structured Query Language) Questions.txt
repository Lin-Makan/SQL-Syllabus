
   Learn SQL (Structured Query Language) Questions :
   ===============================================
   ===============================================

 1. <<<<<<<<< SQL - Home >>>>>>>>>
      
        * Why to Learn SQL?
        * Applications of SQL : List of them
__________________________________________________
                                                  |
     SQL - Home                                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Home
                                                                                        
2) Definition of SQL - Home ?
-----------------------------
*
 
3) What is SQL - Home About ?
-----------------------------
*
*

4) What does SQL - Home Do ?
----------------------------
*
*

5) Advantages/Benefits of SQL - Home :
--------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Home :
-----------------------------------------
*
*
*  

7) Examples of SQL - Home :
---------------------------
*
*
_______________________________________________________________________________

 2. <<<<<<<<< SQL - Overview >>>>>>>>>
       
       * What is SQL?
       * Why SQL?
       * A Brief History of SQL
       * SQL Process - "components" included in this process :
       * simple diagram showing the SQL Architecture −
                                    ''''''''''''''''
       * SQL Commands : Standard SQL Commands :
               1) CREATE
               2) SELECT
               3) INSERT 
               4) UPDATE
               5) DELETE
               6) DROP
           
    = These commands can be classified into the following groups based
      on their nature :-
                          * DDL - Data Definition Language :
                            ''''''''''''''''''''''''''''''''
                                1) CREATE 
                                2) ALTER 
                                3) DROP                                                  _____________________________________________________________
       | Sr.No.  |            Command & Description                  |
       |`````````|```````````````````````````````````````````````````|
       |_________|___________________________________________________|
       |         |                                                   | 
       |   1     |  CREATE                                           |
       |         |  Creates a new table, a view of a table, or other |
       |         |  object in the database.                          | 
       |_________|___________________________________________________|
       |         |                                                   |
       |   2     |  ALTER                                            |
       |         |  Modifies an existing database object, such as    | 
       |         |  table.                                           |
       |_________|___________________________________________________| 
       |         |                                                   |
       |   3     |  DROP                                             |
       |         |  Deletes an entire table, a view of a table or    |
       |         |  other objects in the database.                   | 
       |_________|___________________________________________________|

                          * DML - Data Manipulation Language :
                            '''''''''''''''''''''''''''''''''' 
                                1) SELECT 
                                2) INSERT
                                3) UPDATE
                                4) DELETE
        _____________________________________________________________
       | Sr.No.  |            Command & Description                  |
       |`````````|```````````````````````````````````````````````````|
       |_________|___________________________________________________|
       |         |                                                   | 
       |   1     |  SELECT                                           |
       |         |  Retrieves certain records from one or more tables|  
       |_________|___________________________________________________|
       |         |                                                   |
       |   2     |  INSERT                                           |
       |         |  Creates a record.                                |
       |_________|___________________________________________________| 
       |         |                                                   |
       |   3     |  UPDATE                                           |
       |         |  Modifies records.                                |  
       |_________|___________________________________________________|
       |         |                                                   | 
       |   4     |  DELETE                                           |
       |         |  Deletes records.                                 |
       |_________|___________________________________________________|
                           
                          * DCL - Data Control Language :
                            '''''''''''''''''''''''''''''
                                1) GRANT
                                2) REVOKE
        _____________________________________________________________
       | Sr.No.  |            Command & Description                  |
       |`````````|```````````````````````````````````````````````````|
       |_________|___________________________________________________|
       |         |                                                   | 
       |   1     |  CREATE                                           |
       |         |  Gives a priviledge to user.                      | 
       |_________|___________________________________________________|
       |         |                                                   |
       |   2     |  REVOKE                                           |
       |         |  Takes back priviledges granted from user.        |  
       |_________|___________________________________________________| 
__________________________________________________
                                                  |
       SQL - Overview                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Overview
                                                                                        
2) Definition of SQL - Overview ?
---------------------------------
*
 
3) What is SQL - Overview About ?
---------------------------------
*
*

4) What does SQL - Overview Do ?
--------------------------------
*
*

5) Advantages/Benefits of SQL - Overview :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Overview :
---------------------------------------------
*
*
*  

7) Examples of SQL - Overview :
-------------------------------
*
*
_______________________________________________________________________________

 3. <<<<<<<<<  SQL - RDBMS Concepts  >>>>>>>>>
        
          * What is RDBMS?
          * What is a table?
               
                   example of a CUSTOMERS table −
                 +----+----------+-----+-----------+----------+
                 | ID | NAME     | AGE | ADDRESS   | SALARY   |
                 +----+----------+-----+-----------+----------+
                 |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
                 |  2 | Khilan   |  25 | Delhi     |  1500.00 |
                 |  3 | kaushik  |  23 | Kota      |  2000.00 |
                 |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
                 |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
                 |  6 | Komal    |  22 | MP        |  4500.00 | 
                 |  7 | Muffy    |  24 | Indore    | 10000.00 |
                 +----+----------+-----+-----------+----------+
              
          * What is a field?
          * What is a Record or a Row?
                    
       Following is a single row of data or record in the CUSTOMERS table −
           +----+----------+-----+-----------+----------+
           |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
           +----+----------+-----+-----------+----------+
       A record is a horizontal entity in a table.
            
         * What is a column?
           For example, a column in the CUSTOMERS table is ADDRESS,
             +-----------+
             | ADDRESS   |
             +-----------+
             | Ahmedabad | 
             | Delhi     |
             | Kota      |
             | Mumbai    |
             | Bhopal    |
             | MP        |
             | Indore    |
             +----+------+  
          
        * What is a NULL value?
        
        * SQL Constraints
    most commonly used constraints available in SQL −
           1) NOT NULL Constraint
           2) DEFAULT Constraint
           3) UNIQUE Constraint
           4) PRIMARY Key 
           5) FOREIGN Key
           6) CHECK Constraint
           7) INDEX 
        _____________________________________________________________
       | Sr.No.  |            Command & Description                  |
       |`````````|```````````````````````````````````````````````````|
       |_________|___________________________________________________|
       |         |                                                   | 
       |   1     |  NOT NULL Constraint                              |
       |         |  Ensures that a column cannot have a NULL value   |  
       |_________|___________________________________________________|
       |         |                                                   |
       |   2     |  DEFAULT Constraint                               |
       |         |  Provides a default value for a column when none  |
       |         |  is specified                                     | 
       |_________|___________________________________________________| 
       |         |                                                   |
       |   3     |  UNIQUE Constraint                                |
       |         |  Ensures that all the values in a column are      |
       |         |  Different.                                       | 
       |_________|___________________________________________________|
       |         |                                                   | 
       |   4     |  PRIMARY Key                                      |
       |         |  Uniquely identifies each row/record in a database|
       |         |  table.                                           |  
       |_________|___________________________________________________|
       |         |                                                   |
       |   5     |  FOREIGN Key                                      |
       |         |                                                   |
       |         |                                                   | 
       |_________|___________________________________________________| 
       |         |                                                   |
       |   6     |  CHECK Constraint                                 |
       |         |                                                   |
       |         |                                                   | 
       |_________|___________________________________________________|
       |         |                                                   | 
       |   7     |  INDEX                                            |
       |         |                                                   |
       |         |                                                   |  
       |_________|___________________________________________________|
          
           * Data Integrity :
    The following categories of data integrity exist with each RDBMS −
        _____________________________________________________________
       | Sr.No.  |            Command & Description                  |
       |`````````|```````````````````````````````````````````````````|
       |_________|___________________________________________________|
       |         |                                                   | 
       |   1     |  Entity Integrity                                 |
       |         |                                                   |  
       |_________|___________________________________________________|
       |         |                                                   |
       |   2     |  Domain Integrity −                               |
       |         |                                                   |
       |_________|___________________________________________________| 
       |         |                                                   |
       |   3     |  Referential integrity −                          |
       |         |                                                   |  
       |_________|___________________________________________________|
       |         |                                                   | 
       |   4     |  User-Defined Integrity −                         |
       |         |                                                   |
       |_________|___________________________________________________|

           * Database Normalization :
                1) First Normal Form (1NF)
                2) Second Normal Form (2NF)
                3) Third Normal Form (3NF)
__________________________________________________
                                                  |
      SQL - RDBMS Concepts                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - RDBMS Concepts
                                                                                        
2) Definition of SQL - RDBMS Concepts ?
---------------------------------------
*
 
3) What is SQL - RDBMS Concepts About ?
---------------------------------------
*
*

4) What does SQL - RDBMS Concepts Do ?
--------------------------------------
*
*

5) Advantages/Benefits of SQL - RDBMS Concepts :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - RDBMS Concepts :
---------------------------------------------------
*
*
*  

7) Examples of SQL - RDBMS Concepts :
-------------------------------------
*
*
________________________________________________________________________________

 4. <<<<<<<<< SQL - Databases >>>>>>>>>
         
        A.  MySQL
           1) History of MYSQL
           2) Features of MYSQL
        
        B.  MS SQL Server
           1) History of MS SQL Server
           2) Features of MS SQL Server
        
        C.  ORACLE
           1) History of ORACLE
           2) Features of ORACLE
        
        D.  MS ACCESS
           1) History of MS ACCESS 
           2) Features of MS ACCESS
__________________________________________________
                                                  |
      SQL - Databases                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Databases
                                                                                        
2) Definition of SQL - Databases ?
----------------------------------
*
 
3) What is SQL - Databases About ?
----------------------------------
*
*

4) What does SQL - Databases Do ?
---------------------------------
*
*

5) Advantages/Benefits of SQL - Databases :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Databases :
----------------------------------------------
*
*
*  

7) Examples of SQL - Databases :
--------------------------------
*
*
________________________________________________________________________________

 5. <<<<<<<<< SQL - Syntax >>>>>>>>>
       
      * Various Syntax in SQL
 All the examples given in this tutorial have been tested with a MySQL server :
           
             1) SQL SELECT Statement :
                ``````````````````````
         _________________________________________
        |                                         | 
        |  SELECT column1, column2....columnN     |
        |  FROM   table_name;                     |
        |_________________________________________|

             2) SQL DISTINCT Clause :
                `````````````````````
         ________________________________________________
        |                                                |
        |  SELECT DISTINCT column1, column2....columnN   | 
        |  FROM   table_name;                            |
        |________________________________________________|

             3) SQL WHERE Clause :
                ``````````````````
         _________________________________________
        |                                         |
        |  SELECT column1, column2....columnN     |
        |  FROM   table_name                      | 
        |  WHERE  CONDITION;                      |
        |_________________________________________|

             4) SQL AND/OR Clause :
                ````````````````````
         _____________________________________________
        |                                             |
        |  SELECT column1, column2....columnN         |
        |  FROM   table_name                          |
        |  WHERE  CONDITION-1 {AND|OR} CONDITION-2;   |
        |_____________________________________________| 

             5) SQL IN Clause :
                ```````````````
         ___________________________________________________
        |                                                   |
        |  SELECT column1, column2....columnN               |
        |  FROM   table_name                                |
        |  WHERE  column_name IN (val-1, val-2,...val-N);   |
        |___________________________________________________|

             6) SQL BETWEEN Clause :
                `````````````````````
         _________________________________________________
        |                                                 |
        |  SELECT column1, column2....columnN             |
        |  FROM   table_name                              |
        |  WHERE  column_name BETWEEN val-1 AND val-2;    | 
        |_________________________________________________|

             7) SQL LIKE Clause :
                ``````````````````
         __________________________________________
        |                                          |
        |  SELECT column1, column2....columnN      | 
        |  FROM   table_name                       |
        |  WHERE  column_name LIKE { PATTERN };    |
        |__________________________________________|

             8) SQL ORDER BY Clause :
                `````````````````````
         _________________________________________
        |                                         |
        |  SELECT column1, column2....columnN     |
        |  FROM   table_name                      | 
        |  WHERE  CONDITION                       |
        |  ORDER BY column_name {ASC|DESC};       |  
        |_________________________________________|

             9) SQL GROUP BY Clause :
                `````````````````````
         _________________________________________
        |                                         |
        |  SELECT SUM(column_name)                |
        |  FROM   table_name                      |
        |  WHERE  CONDITION                       |
        |  GROUP BY column_name;                  |
        |_________________________________________|


            10) SQL COUNT Clause :
                ```````````````````
         _________________________________________
        |                                         |
        |  SELECT COUNT(column_name)              |
        |  FROM   table_name                      | 
        |  WHERE  CONDITION;                      |
        |_________________________________________|

            11) SQL HAVING Clause :
                ````````````````````
         ______________________________________________
        |                                              |
        |  SELECT SUM(column_name)                     |
        |  FROM   table_name                           | 
        |  WHERE  CONDITION                            |
        |  GROUP BY column_name                        |
        |  HAVING (arithematic function condition);    | 
        |______________________________________________|

            12) SQL CREATE TABLE Statement :
                `````````````````````````````
         _________________________________________
        |                                         |
        |  CREATE TABLE table_name(               |
        |  column1 datatype,                      | 
        |  column2 datatype,                      |
        |  column3 datatype,                      |
        |  .....                                  | 
        |  columnN datatype,                      |
        |  PRIMARY KEY( one or more columns )     |   
        |  );                                     |
        |_________________________________________|

            13) SQL DROP TABLE Statement :
                ```````````````````````````
         _________________________________________
        |                                         |
        |  DROP TABLE table_name;                 |
        |_________________________________________|

            14) SQL CREATE INDEX Statement :
                `````````````````````````````
         _________________________________________________
        |                                                 |
        |  CREATE UNIQUE INDEX index_name                 |
        |  ON table_name ( column1, column2,...columnN);  |
        | ________________________________________________|

            15) SQL DROP INDEX Statement :
                ```````````````````````````
         _________________________________________
        |                                         |
        |  ALTER TABLE table_name                 | 
        |  DROP INDEX index_name;                 |
        |_________________________________________|

            16) SQL DESC Statement :
                `````````````````````
         _________________________________________
        |                                         |
        |  DESC table_name;                       |
        |_________________________________________|

            17) SQL TRUNCATE TABLE Statement :
                ```````````````````````````````
         _________________________________________
        |                                         |
        |  TRUNCATE TABLE table_name;             | 
        |_________________________________________|

            18) SQL ALTER TABLE Statement :
                ````````````````````````````
         _____________________________________________________________________
        |                                                                     |
        |  ALTER TABLE table_name {ADD|DROP|MODIFY} column_name {data_ype};   |
        |_____________________________________________________________________|

            19) SQL ALTER TABLE Statement (Rename) :
                `````````````````````````````````````
         _____________________________________________________
        |                                                     |
        |  ALTER TABLE table_name RENAME TO new_table_name;   |
        |_____________________________________________________|

            20) SQL INSERT INTO Statement :
                ````````````````````````````
         __________________________________________________________
        |                                                          |
        |  INSERT INTO table_name( column1, column2....columnN)    |
        |  VALUES ( value1, value2....valueN);                     |
        |__________________________________________________________|

            21) SQL UPDATE Statement :
                ```````````````````````
         ______________________________________________________________
        |                                                              |
        |  UPDATE table_name                                           |
        |  SET column1 = value1, column2 = value2....columnN=valueN    |
        |  [ WHERE  CONDITION ];                                       |
        |______________________________________________________________|

            22) SQL DELETE Statement :
                ```````````````````````
         _________________________________________
        |                                         | 
        |  DELETE FROM table_name                 |
        |  WHERE  {CONDITION};                    |
        |_________________________________________|

            23) SQL CREATE DATABASE Statement :
                ````````````````````````````````
         _________________________________________
        |                                         |
        |  CREATE DATABASE database_name;         |
        |_________________________________________|

            24) SQL DROP DATABASE Statement :
                ``````````````````````````````
         _________________________________________
        |                                         |
        |  DROP DATABASE database_name;           | 
        |_________________________________________|

            25) SQL USE Statement :
                ````````````````````
         ____________________________________
        |                                    | 
        |  USE database_name;                |
        |____________________________________|

            26) SQL COMMIT Statement :
                ```````````````````````
         __________________
        |                  |
        |  COMMIT;         |
        |__________________|

            27) SQL ROLLBACK Statement :
                `````````````````````````
         ___________________
        |                   |
        |  ROLLBACK;        | 
        |___________________|

__________________________________________________
                                                  |
       SQL - Syntax                               |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Syntax
                                                                                        
2) Definition of SQL - Syntax ?
-------------------------------
*
 
3) What is SQL - Syntax About ?
-------------------------------
*
*

4) What does SQL - Syntax Do ?
------------------------------
*
*

5) Advantages/Benefits of SQL - Syntax :
----------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Syntax :
-------------------------------------------
*
*
*  

7) Examples of SQL - Syntax :
-----------------------------
*
*
_________________________________________________________________________________

 6. <<<<<<<<< SQL - Data Types >>>>>>>>>
     
        SQL Server offers six categories of "data types" for your
        use which are listed below − 

      1) ** Exact Numeric Data Types **
            ========================
 ____________________________________________________________________________
|   DATA TYPE	|        FROM	              |       TO                     |
|```````````````|`````````````````````````````|``````````````````````````````|
|_______________|_____________________________|______________________________|
|  bigint       |  -9,223,372,036,854,775,808 |	  9,223,372,036,854,775,807  |
|_______________|_____________________________|______________________________|
|  int          |  -2,147,483,648             |   2,147,483,647              |
|_______________|_____________________________|______________________________|
|  smallint     |  -32,768                    |   32,767                     |
|_______________|_____________________________|______________________________|
|  tinyint      |  0                          |   255                        |
|_______________|_____________________________|______________________________|
|   bit         |  0                          |   1                          |
|_______________|_____________________________|______________________________|
|  decimal      |  -10^38 +1                  |   10^38 -1                   |
|_______________|_____________________________|______________________________|
|  numeric      |  -10^38 +1                  |   10^38 -1                   |
|_______________|_____________________________|______________________________|
|  money        |  -922,337,203,685,477.5808  |  +922,337,203,685,477.5807   |
|_______________|_____________________________|______________________________|
|  smallmoney   |  -214,748.3648              |  +214,748.3647               |
|_______________|_____________________________|______________________________|                      
                        
      2) ** Approximate Numeric Data Types **
            ==============================
 ____________________________________________________________________________
|   DATA TYPE	|        FROM	              |       TO                     |
|```````````````|`````````````````````````````|``````````````````````````````|
|_______________|_____________________________|______________________________|
|  float        |     -1.79E + 308            |	    1.79E + 308              |
|_______________|_____________________________|______________________________|
|  real         |     -3.40E + 38             |     3.40E + 38               |
|_______________|_____________________________|______________________________|

      3) ** Date and Time Data Types **
            ========================
 ____________________________________________________________________________
|   DATA TYPE	|        FROM	              |       TO                     |
|```````````````|`````````````````````````````|``````````````````````````````|
|_______________|_____________________________|______________________________|
|  datetime     |   Jan 1, 1753               |	   Dec 31, 9999              |
|_______________|_____________________________|______________________________|
| smalldatetime |   Jan 1, 1900               |    Jun 6, 2079               |
|_______________|_____________________________|______________________________|
|  date         |       Stores a date like June 30, 1991                     |
|_______________|____________________________________________________________|
|  time         |       Stores a time of day like 12:30  P.M                 |
|_______________|____________________________________________________________|

      4) ** Character Strings Data Types **
            ============================
 ____________________________________________________________________________
|   Sr.No.	|        DATA TYPE & Description                             |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  "char"                                                    |
|               |  Maximum length of 8,000 characters.(Fixed length non-     | 
|               |  Unicode characters)                                       |
|_______________|____________________________________________________________|
|      2        |  "varchar"                                                 |
|               |  Maximum of 8,000 characters.(Variable-length non-Unicode  |
|               |  data).                                                    |
|_______________|____________________________________________________________|
|      3        |  "varchar(max)"                                            |
|               |  Maximum length of 2E + 31 characters, Variable-length     |
|               |  non-Unicode data (SQL Server 2005 only).                  |                   
|_______________|____________________________________________________________|
|      4        |  "text"                                                    | 
|               |  Variable-length non-Unicode data with a maximum length of |
|               |  2,147,483,647 characters.                                 |                 
|_______________|____________________________________________________________|

      5) ** Unicode Character Strings Data Types **
            ====================================
 ____________________________________________________________________________
|   Sr.No.	|        DATA TYPE & Description                             |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  "nchar"                                                   |
|               |  Maximum length of 4,000 characters.( Fixed length Unicode)|
|_______________|____________________________________________________________|
|      2        |  "nvarchar"                                                |
|               |  Maximum length of 4,000 characters.(Variable length       |
|               |  Unicode)                                                  |
|_______________|____________________________________________________________|
|      3        |  "nvarchar(max)"                                           |
|               |  Maximum length of 2E + 31 characters (SQL Server 2005     |
|               |  only).( Variable length Unicode)                          |                   
|_______________|____________________________________________________________|
|      4        |  "ntext"                                                   | 
|               |  Maximum length of 1,073,741,823 characters. ( Variable    |
|               |  length Unicode )                                          |                 
|_______________|____________________________________________________________|

      6) ** Binary Data Types **
            =================
 ____________________________________________________________________________
|   Sr.No.	|        DATA TYPE & Description                             |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  "binary"                                                  |
|               |  Maximum length of 8,000 bytes(Fixed-length binary data )  |
|_______________|____________________________________________________________|
|      2        |  "varbinary"                                               |
|               |  Maximum length of 8,000 bytes.(Variable length binary     |
|               |  data)                                                     |
|_______________|____________________________________________________________|
|      3        |  "varbinary(max)"                                          |
|               |  Maximum length of 2E + 31 bytes (SQL Server 2005 only).   |
|               |  (Variable length Binary data)                             |                   
|_______________|____________________________________________________________|
|      4        |  "image"                                                   | 
|               |  Maximum length of 2,147,483,647 bytes. ( Variable length  |
|               |  Binary Data)                                              |                 
|_______________|____________________________________________________________|

      7) ** Misc Data Types **
            ===============
 ____________________________________________________________________________
|   Sr.No.	|        DATA TYPE & Description                             |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  "sql_variant"                                             |
|               |  Stores values of various SQL Server-supported data types, |
|               |  except text, ntext, and timestamp.                        |
|_______________|____________________________________________________________|
|      2        |  "timestamp"                                               |
|               |  Stores a database-wide unique number that gets updated    |
|               |  every time a row gets updated                             |
|_______________|____________________________________________________________|
|      3        |  "uniqueidentifier"                                        |
|               |  Stores a globally unique identifier (GUID)                |                   
|_______________|____________________________________________________________|
|      4        |  "xml"                                                     | 
|               |  Stores XML data. You can store xml instances in a column  |
|               |  or a variable (SQL Server 2005 only)                      |                 
|_______________|____________________________________________________________|
|      5        |  "cursor"                                                  |
|               |  Reference to a cursor object                              |                   
|_______________|____________________________________________________________|
|      6        |  "table"                                                   | 
|               |  Stores a result set for later processing                  |                 
|_______________|____________________________________________________________|

__________________________________________________
    SQL - Data Types                              |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Data Types
                                                                                        
2) Definition of SQL - Data Types ?
-----------------------------------
*
 
3) What is SQL - Data Types About ?
-----------------------------------
*
*

4) What does SQL - Data Types Do ?
----------------------------------
*
*

5) Advantages/Benefits of SQL - Data Types :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Data Types :
-----------------------------------------------
*
*
*  

7) Examples of SQL - Data Types :
---------------------------------
*
*
__________________________________________________________________________________

 7. <<<<<<<<< SQL - Operators >>>>>>>>>
        
        1)  What is an Operator in SQL?
            '''''''''''''''''''''''''''
              * Arithmetic operators
              * Comparison operators
              * Logical operators
              * Operators used to negate conditions
       
           A) ** SQL Arithmetic Operators **
                 ========================
 ______________________________________________________________________________
|   Operator	  |     Description	        |      Example                 |
|`````````````````|`````````````````````````````|``````````````````````````````|
|_________________|_____________________________|______________________________|
| + (Addition)    |  Adds values on either side |  a + b will give 30          |
|                 |  of the operator.           |                              |
|_________________|_____________________________|______________________________|
| -(Subtraction)  |  Subtracts right hand       |  a - b will give -10         |
|                 |  operand from left hand     |                              |
|                 |  operand                    |                              | 
|_________________|_____________________________|______________________________|
| *               | Multiplies values on either |  a * b will give 200         |
|(Multiplication) | side of the operator        |                              |           
|_________________|_____________________________|______________________________|
| /(Division)     | Divides left hand operand   |  b / a will give 2           |
|                 | by right hand operand.      |                              |
|_________________|_____________________________|______________________________|
| % (Modulus)     | Divides left hand operand   |  b % a will give 0           |
|                 | by right hand operand and   |                              |
|                 | returns remainder           |                              |
|_________________|_____________________________|______________________________|


           B) ** SQL Comparison Operators **
                 ========================
 ____________________________________________________________________________
|   Operator  |    Description                |   Example                    |
|`````````````|```````````````````````````````|``````````````````````````````|
|_____________|_______________________________|______________________________|
|  =          |  Checks if the values of two  |	 (a = b) is not true.        |
|             |  operands are equal or not, if|                              |
|             |  yes then condition becomes   |                              | 
|             |  true.                        |                              | 
|_____________|_______________________________|______________________________|
|  !=         |  Checks if the values of two  |                              |
|             |  operands are equal or not,   |  (a != b) is true.           |
|             |  if values are not equal then |                              |
|             |  condition becomes true.      |                              |  
|_____________|_______________________________|______________________________|
|  <>         |  Checks if the values of two  |                              |
|             |  operands are equal or not,   |  (a <> b) is true.           |
|             |  if values are not equal then |                              |
|             |  condition becomes true.      |                              |   
|_____________|_______________________________|______________________________|
|  >          | Checks if the value of left   |                              |
|             | operand is greater than the   |  (a > b) is not true.        |
|             | value of right operand, if yes|                              |
|             | then condition becomes true.  |                              |  
|_____________|_______________________________|______________________________|
|  <          | Checks if the value of left   |                              |
|             | operand is less than the value|  (a < b) is true.            |
|             | of right operand, if yes then |                              |
|             | condition beomes true.        |                              |  
|_____________|_______________________________|______________________________|
|  >=         | Checks if the value of left   |                              |
|             | operand is greater than or    |  (a >= b) is not true.       |
|             | equal to the value of right   |                              |
|             | operand, if yes then condition|                              |
|             | becomes true.                 |                              |      
|_____________|_______________________________|______________________________|
|  <=         | Checks if the value of left   |                              |
|             | operand is less than or equal |  (a <= b) is true.           |
|             | to the value of right operand |                              |
|             | if yes then condition becomes |                              |
|             | true.                         |                              | 
|_____________|_______________________________|______________________________|
|  !<         | Checks if the value of left   |                              |
|             | operand is not less than the  |  (a !< b) is false.          |
|             | value of right operand, if yes|                              |
|             | then condition becomes true.  |                              |  
|_____________|_______________________________|______________________________|
|  !>         | Checks if the value of left   |                              |
|             | operand is not greater than   |  (a !> b) is true.           |
|             | the value of right operand, if|                              |
|             | yes then condition becomes    |                              |
|             | true.                         |                              | 
|_____________|_______________________________|______________________________|

           C) ** SQL Logical Operators **
                 =====================
 ________________________________________________________________________
|   Sr.No.  |      Operator & Description                                |
|```````````|````````````````````````````````````````````````````````````|
|___________|____________________________________________________________|
|      1    |  "ALL"                                                     |
|           |  The ALL operator is used to compare a value to all values |
|           |  in another value set.                                     |
|___________|____________________________________________________________|
|      2    |  "AND"                                                     |
|           |  The AND operator allows the existence of multiple         |
|           |  conditions in an SQL statement's WHERE clause.            |
|___________|____________________________________________________________|
|      3    |  "ANY"                                                     |
|           |  The ANY operator is used to compare a value to any        |
|           |  applicable value in the list as per the condition.        |                   
|___________|____________________________________________________________|
|      4    |  "BETWEEN"                                                 | 
|           |  The BETWEEN operator is used to search for values that are|
|           |  within a set of values, given the minimum value and the   |
|           |  maximum value.                                            |                 
|___________|____________________________________________________________|
|      5    |  "EXISTS"                                                  |
|           |  The EXISTS operator is used to search for the presence of |
|           |  a row in a specified table that meets a certain criterion |
|___________|____________________________________________________________|
|      6    |  "IN"                                                      |
|           |  The IN operator is used to compare a value to a list of   |
|           |  literal values that have been specified.                  |
|___________|____________________________________________________________|
|      7    |  "LIKE"                                                    |
|           |  The LIKE operator is used to compare a value to similar   |
|           |  values using wildcard operators.                          |                   
|___________|____________________________________________________________|
|      8    |  "NOT"                                                     | 
|           |  The NOT operator reverses the meaning of the logical      |
|           |  operator with which it is used. Eg:  NOT EXISTS, NOT      |
|           |  BETWEEN, NOT IN, etc. "This is a negate operator".        |           
|___________|____________________________________________________________|
|      9    |  "OR"                                                      |
|           |  The OR operator is used to combine multiple conditions in |
|           |  an SQL statement's WHERE clause.                          |
|___________|____________________________________________________________|
|      10   |  "IS NULL"                                                 |
|           |  The NULL operator is used to compare a value with a NULL  |
|           |  value.                                                    |
|___________|____________________________________________________________|
|      11   |  "UNIQUE"                                                  |
|           |  The UNIQUE operator searches every row of a specified     |
|           |  table for uniqueness (no duplicates)                      |                   
|___________|____________________________________________________________|


__________________________________________________
                                                  |
      SQL - Operators                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Operators
                                                                                        
2) Definition of SQL - Operators ?
----------------------------------
*
 
3) What is SQL - Operators About ?
----------------------------------
* 
*

4) What does SQL - Operators Do ?
---------------------------------
*
*

5) Advantages/Benefits of SQL - Operators :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Operators :
----------------------------------------------
*
*
*  

7) Examples of SQL - Operators :
--------------------------------
*
*
_______________________________________________________________________________

 8. <<<<<<<<< SQL - Expressions >>>>>>>>>

   * Syntax of the "SELECT" statement as follows - 
     ________________________________________
    |  SELECT column1, column2, columnN 
    |  FROM table_name 
    |  WHERE [CONDITION|EXPRESSION]; 
    |________________________________________

   * different types of "SQL expressions" mentioned below −
                         '''''''''''''''
        + Boolean
        + Numeric
        + Date
     
         (A) Boolean Expressions :
             =====================
      + "SQL Boolean Expressions" fetch the data based on matching a single
        value. Following is the syntax -
     _____________________________________________
    |  SELECT column1, column2, columnN 
    |  FROM table_name 
    |  WHERE SINGLE VALUE MATCHING EXPRESSION; 
    |_____________________________________________

        * Consider the 'CUSTOMERS' table having the following records −

   SQL> SELECT * FROM CUSTOMERS;
   +----+----------+-----+-----------+----------+
   | ID | NAME     | AGE | ADDRESS   | SALARY   |
   +----+----------+-----+-----------+----------+
   |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
   |  2 | Khilan   |  25 | Delhi     |  1500.00 |
   |  3 | kaushik  |  23 | Kota      |  2000.00 |
   |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
   |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
   |  6 | Komal    |  22 | MP        |  4500.00 |
   |  7 | Muffy    |  24 | Indore    | 10000.00 |
   +----+----------+-----+-----------+----------+
   7 rows in set (0.00 sec)
 
   * The table below shows the usage of various "SQL Boolean Expressions" -

    SQL> SELECT * FROM CUSTOMERS WHERE SALARY = 10000;

    +----+-------+-----+---------+----------+
    | ID | NAME  | AGE | ADDRESS | SALARY   |
    +----+-------+-----+---------+----------+
    |  7 | Muffy |  24 | Indore  | 10000.00 |
    +----+-------+-----+---------+----------+

    1 row in set (0.00 sec)
  
       (B) Numeric Expression -
           ===================
   * These expressions are used to perform any mathematical operation in any
     query.
            Following is the Syntax -
     ____________________________________________________
    |  SELECT numerical_expression as  OPERATION_NAME
    |  [FROM table_name
    |  WHERE CONDITION] ;
    |____________________________________________________  
    
   * Here, the numerical_expression is used for a mathematical expression
     or any formula.
   * Following is the example showing the usage of "SQL Numeric Expression" -

       SQL> SELECT (15 + 6) AS ADDITION
       +----------+
       | ADDITION |
       +----------+
       |       21 |
       +----------+

       1 row in set (0.00 sec)

    * There are several built-in functions like avg(), sum(), count(), etc
      to perform what is known as the aggregate data calculations against
      a table or a specified table column. 
          
       SQL> SELECT COUNT(*) AS "RECORDS" FROM CUSTOMERS; 
       +---------+
       | RECORDS |
       +---------+
       |       7 |
       +---------+

       1 row in set (0.00 sec)
        
          (C) Date Expressions :
              ===================
            
        * Date Expressions return current system date and time values −

        SQL>  SELECT CURRENT_TIMESTAMP;
        +---------------------+
        | Current_Timestamp   |
        +---------------------+
        | 2009-11-12 06:40:23 |
        +---------------------+

        1 row in set (0.00 sec)
    
     * Another date expression is as shown below −
          
     SQL>  SELECT  GETDATE();;
     +-------------------------+
     | GETDATE                 |
     +-------------------------+
     | 2009-10-22 12:07:18.140 |
     +-------------------------+

     1 row in set (0.00 sec)
__________________________________________________
                                                  |
      SQL - Expressions                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Expressions
                                                                                        
2) Definition of SQL - Expressions ?
------------------------------------
*
 
3) What is SQL - Expressions About ?
------------------------------------
*
*

4) What does SQL - Expressions Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Expressions :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Expressions :
------------------------------------------------
*
*
*  

7) Examples of SQL - Expressions :
----------------------------------
*
*
________________________________________________________________________________

 9. <<<<<<<<< SQL - Create Database >>>>>>>>>
       
   * The SQL CREATE DATABASE statement is used to create a 
     new SQL database.
       
        ** Syntax **
     + The basic syntax of this CREATE DATABASE statement is as follows −
                                ''''''''''''''  
         ___________________________________
        |  CREATE DATABASE DatabaseName;    |
        |___________________________________|
     
     + Always the database name should be unique within the RDBMS.
                                                            '''''
        ** Example **
      + If you want to create a new database <testDB>, then the "CREATE
        DATABASE" statement would be as shown below −
          __________________________________
         |  SQL> CREATE DATABASE testDB;    |
         |__________________________________|
      
     ! IMPORTANCE :
  * Make sure you have the (admin privilege) before creating any database. 
                            """""""""""""""
  * Once a database is created, you can check it in the list of databases
    as follows −

            SQL> SHOW DATABASES;

            +--------------------+
            | Database           |
            +--------------------+
            | information_schema |
            | AMROOD             |
            | TUTORIALSPOINT     |
            | mysql              |
            | orig               |
            | test               | 
            | testDB             |
            +--------------------+

            7 rows in set (0.00 sec)
__________________________________________________
                                                  |
       SQL - Create Database                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Create Database
                                                                                        
2) Definition of SQL - Create Database ?
----------------------------------------
*
 
3) What is SQL - Create Database About ?
----------------------------------------
*
*

4) What does SQL - Create Database Do ?
---------------------------------------
*
*

5) Advantages/Benefits of SQL - Create Database :
-------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Create Database :
----------------------------------------------------
*
*
*  

7) Examples of SQL - Create Database :
--------------------------------------
*
*
__________________________________________________________________________________

 10. <<<<<<<<< SQL - Drop Database >>>>>>>>>
       
     * The SQL "DROP DATABASE" statement is used to drop an existing
       database in SQL schema. 
         
          * Syntax of Drop Database -
     The basic syntax of DROP DATABASE statement is as follows −
                         '''''''''''''
        _____________________________________
       |  DROP DATABASE DatabaseName;        |
       |_____________________________________|  
    
     Always the database name should be unique within the "RDBMS".
                                                           '''''  
         * Example of Drop Database -
    If you want to delete an existing database <testDB>, then the "DROP
    DATABASE" statement would be as shown below -                 ''''''
    '''''''''
        __________________________________
       |  SQL> DROP DATABASE testDB;      |
       |__________________________________|
 
  ** NOTE -
     Be careful before using this operation because by deleting an existing
     database would result in loss of complete information stored in the 
     database.
     
  ** IMPORTANT -
     Make sure you have the admin privilege before dropping any database.
     Once a database is dropped, you can check it in the list of the 
     Databases as shown below -
         
         SQL> SHOW DATABASES;
         +--------------------+
         | Database           |
         +--------------------+
         | information_schema |
         | AMROOD             |
         | TUTORIALSPOINT     |
         | mysql              |
         | orig               |
         | test               |
         +--------------------+

         6 rows in set (0.00 sec)
__________________________________________________
                                                  |
         SQL - Drop Database                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Drop Database
                                                                                        
2) Definition of SQL - Drop Database ?
--------------------------------------
*
 
3) What is SQL - Drop Database About ?
--------------------------------------
*
*

4) What does SQL - Drop Database Do ?
-------------------------------------
*
*

5) Advantages/Benefits of SQL - Drop Database :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Drop Database :
--------------------------------------------------
*
*
*  

7) Examples of SQL - Drop Database :
------------------------------------
*
*
__________________________________________________________________________________
        
 11. <<<<<<<<< SQL - Select Database >>>>>>>>>
     <<<<<<<<< SQL - Select Database, USE Statement >>>>>>>>>
     
   * When you have multiple databases in your SQL Schema, then before
     starting your operation, you would need to select a database where
     all the operations would be performed. 
   
   * The SQL "USE statement" is used to select any existing database in 
     the SQL schema. 

        + Syntax of the Select Database, USE Statement :
          """"""""""""""""""""""""""""""""""""""""""""""
           The basic syntax of the USE statement is as shown below −
       _______________________  
      |  USE DatabaseName;    |
      |_______________________|
            
           Always the database name should be unique within the "RDBMS".
                                                                '''''''
          
        + Example of the Select Databases -
          """"""""""""""""""""""""""""""""" 
              
             SQL> SHOW DATABASES;
             +--------------------+
             | Database           |
             +--------------------+ 
             | information_schema |
             | AMROOD             |
             | TUTORIALSPOINT     |
             | mysql              |
             | orig               |
             | test               |
             +--------------------+

             6 rows in set (0.00 sec)
      
      * Now, if you want to work with the AMROOD database, then you can
        execute the following SQL command and start working with the
        "AMROOD" Database :
         ________________________
        |  SQL> USE AMROOD;      |
        |________________________| 
      
__________________________________________________
                                                  |
       SQL - Select Database                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Select Database
                                                                                        
2) Definition of SQL - Select Database ?
----------------------------------------
*
 
3) What is SQL - Select Database About ?
----------------------------------------
*
*

4) What does SQL - Select Database Do ?
---------------------------------------
*
*

5) Advantages/Benefits of SQL - Select Database :
-------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Select Database :
----------------------------------------------------
*
*
*  

7) Examples of SQL - Select Database :
--------------------------------------
*
*
_________________________________________________________________________________

 12. <<<<<<<<< SQL - Create Table >>>>>>>>>
    
      * Creating a basic table involves naming the table and defining its
        columns and each "column's data type".
                          ''''''''''''''''''''
      * The SQL "CREATE TABLE" statement is used to create a new table.
                 """"""""""""

           * Syntax of Create Table statement.
             '''''''''''''''''''''''''''''''''
       The basic syntax of the "CREATE TABLE" statement is as follows −
                                ''''''''''''
        ___________________________________________
       |  CREATE TABLE table_name(                 
       |     column1 datatype,
       |     column2 datatype,
       |     column3 datatype,
       |     .....
       |     columnN datatype,
       |     PRIMARY KEY( one or more columns )
       |  );
       |___________________________________________
     
   ** CREATE TABLE is the keyword to tell the database system what you
      want to do.
    * Here we want to create a new table.
    * The unique name or identifier for the table follows the 
      "CREATE TABLE" statement.
    
   ** Then in brackets comes the list defining each column in the table
      and what sort of 'data type' it is.
    * The Syntax beomes clearer with the following example -
    
   ** A copy of an existing table can be created using a combination of 
      the "CREATE TABLE" statement and the SELECT statement.

        GoTo  * "Create Table using another Table"
                 '''''''''''''''''''''''''''''''''
      Example of Create Table -
      """""""""""""""""""""""""
    The code block below is an example, which creates a "CUSTOMERS table" 
    with an "ID" as a primary key and "NOT NULL" are the constraints 
    showing that these fields cannot be NULL while creating records 
    in this table - 
        ____________________________________________     
       |  SQL> CREATE TABLE CUSTOMERS(
       |     ID   INT              NOT NULL,
       |     NAME VARCHAR (20)     NOT NULL,
       |     AGE  INT              NOT NULL,
       |     ADDRESS  CHAR (25) ,
       |     SALARY   DECIMAL (18, 2),       
       |     PRIMARY KEY (ID)
       |  );
       |____________________________________________

  + You can verify if your table has been created successfully by looking 
    at the message displayed by the SQL Server, otherwise you can use the 
   "DESC" command as follows -

     SQL> DESC CUSTOMERS;
     +---------+---------------+------+-----+---------+-------+
     | Field   | Type          | Null | Key | Default | Extra |
     +---------+---------------+------+-----+---------+-------+
     | ID      | int(11)       | NO   | PRI |         |       |
     | NAME    | varchar(20)   | NO   |     |         |       |
     | AGE     | int(11)       | NO   |     |         |       |
     | ADDRESS | char(25)      | YES  |     | NULL    |       |
     | SALARY  | decimal(18,2) | YES  |     | NULL    |       |
     +---------+---------------+------+-----+---------+-------+

     5 rows in set (0.00 sec)
      
    * Now, you have CUSTOMERS table available in your database which
      you can use to store the required information related to 
      customers.
__________________________________________________
   SQL - Create Table                             |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Create Table
                                                                                        
2) Definition of SQL - Create Table ?
-------------------------------------
*
 
3) What is SQL - Create Table About ?
-------------------------------------
*
*

4) What does SQL - Create Table Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Create Table :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Create Table :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Create Table :
-----------------------------------
*
*
_________________________________________________________________________________

 13. <<<<<<<<< SQL - Drop Table >>>>>>>>>
    
    * The SQL DROP TABLE statement is used to remove a table definition
      and all the data, indexes, triggers, constraints and permission
      specifications for that table. 
     
   ** NOTE -
      You should be very careful while using this command because once a 
      table is deleted then all the information available in that table
      will also be lost forever. 
   
        * Syntax of Drop Table -
          ''''''''''''''''''''''
     The basic syntax of this DROP TABLE statement is as follows -
   ___________________________
  |  DROP TABLE table_name;   |
  |___________________________| 
         
        * Example of Drop Table -
          '''''''''''''''''''''''
     +  Let us first verify the CUSTOMERS table and then we will delete
        it from the database as shown below -
            
        SQL> DESC CUSTOMERS;
        +---------+---------------+------+-----+---------+-------+
        | Field   | Type          | Null | Key | Default | Extra |
        +---------+---------------+------+-----+---------+-------+
        | ID      | int(11)       | NO   | PRI |         |       |
        | NAME    | varchar(20)   | NO   |     |         |       |
        | AGE     | int(11)       | NO   |     |         |       |
        | ADDRESS | char(25)      | YES  |     | NULL    |       |
        | SALARY  | decimal(18,2) | YES  |     | NULL    |       |
        +---------+---------------+------+-----+---------+-------+

        5 rows in set (0.00 sec)
      
   * This means that the CUSTOMERS table is available in the database,
     so let us now drop it as shown below,
      __________________________________________
     |  SQL> DROP TABLE CUSTOMERS;              |
     |  Query OK, 0 rows affected (0.01 sec)    | 
     |__________________________________________|
    
   * Now, if you would try the "DESC" command, then you will get the 
     following error -  
       _____________________________________________________________
      |  SQL> DESC CUSTOMERS;
      |  ERROR 1146 (42S02): Table 'TEST.CUSTOMERS' doesn't 
      |_____________________________________________________________

   * Here, "TEST" is the database name which we are using for our examples.
__________________________________________________
                                                  |
       SQL - Drop Table                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Drop Table
                                                                                        
2) Definition of SQL - Drop Table ?
-----------------------------------
*
 
3) What is SQL - Drop Table About ?
-----------------------------------
*
*

4) What does SQL - Drop Table Do ?
----------------------------------
*
*

5) Advantages/Benefits of SQL - Drop Table :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Drop Table :
-----------------------------------------------
*
*
*  

7) Examples of SQL - Drop Table :
---------------------------------
*
*
__________________________________________________________________________________

 14. <<<<<<<<< SQL - Insert Query >>>>>>>>>
         
    The SQL "INSERT INTO" Statement is used to add new rows of data to a 
    table in the database.
        
      * Syntax of the Insert Query -
        '''''''''''''''''''''''''''''
     + There are two basic syntaxes of the INSERT INTO statement which are
       shown below -                       """"""""""" 
        __________________________________________________________________
       |  INSERT INTO TABLE_NAME (column1, column2, column3,...columnN)  
       |  VALUES (value1, value2, value3,...valueN);
       |__________________________________________________________________
   
     * Here, column1, column2, column3,...columnN are the "names of the 
       columns" in the table into which you want to "insert the data".
                                                     ----------------
     
     * You may not need to specify the column(s) name in the SQL query
       if you are adding values for all the columns of the table. 
     * But make sure the order of the values is in the same order as 
       the columns in the table.
           
          + The "SQL INSERT INTO" syntax will be as follows −
                 '''''''''''''''
     ____________________________________________________________________
    |  INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);
    |____________________________________________________________________    
       
          + Example of Insert Into -
            '''''''''''''''''''''''' 
      * The following statements would create six records in the CUSTOMERS
        table :                                                  '''''''''
      _______________________________________________________________
     |  INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
     |  VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );
     |
     |  INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
     |  VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );
     |
     |  INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
     |  VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );
     |
     |  INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
     |  VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );
     | 
     |  INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) 
     |  VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );
     | 
     |  INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
     |  VALUES (6, 'Komal', 22, 'MP', 4500.00 );
     |________________________________________________________________
       
     * You can create a record in the CUSTOMERS table by using the second 
       'Syntax' as shown below -
       ____________________________________________________
      |  INSERT INTO CUSTOMERS                             |
      |  VALUES (7, 'Muffy', 24, 'Indore', 10000.00 );     | 
      |____________________________________________________| 
   
     * All the above statements would produce the following records in the 
       "CUSTOMERS" table as shown below -  
           
         +----+----------+-----+-----------+----------+
         | ID | NAME     | AGE | ADDRESS   | SALARY   |
         +----+----------+-----+-----------+----------+
         |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
         |  2 | Khilan   |  25 | Delhi     |  1500.00 |
         |  3 | kaushik  |  23 | Kota      |  2000.00 |
         |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
         |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
         |  6 | Komal    |  22 | MP        |  4500.00 |
         |  7 | Muffy    |  24 | Indore    | 10000.00 |
         +----+----------+-----+-----------+----------+

           ** Populate one table using another table **
              ======================================

  * You can populate the data into a table through the select statement
    over another table; provided the other table has a set of fields, 
    which are required to populate the first table.  
    _____________________________________________________________________      
   |  INSERT INTO first_table_name [(column1, column2, ... columnN)] 
   |     SELECT column1, column2, ...columnN 
   |     FROM second_table_name
   |     [WHERE condition];
   |_____________________________________________________________________ 
__________________________________________________
                                                  |
        SQL - Insert Query                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Insert Query
                                                                                        
2) Definition of SQL - Insert Query ?
-------------------------------------
*
 
3) What is SQL - Insert Query About ?
-------------------------------------
*
* 

4) What does SQL - Insert Query Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Insert Query :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Insert Query :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Insert Query :
-----------------------------------
*
*
__________________________________________________________________________________

 15. <<<<<<<<< SQL - Select Query >>>>>>>>>
       
     * The SQL SELECT statement is used to fetch the data from a database
       table which returns this data in the form of a result table.
     * These result tables are called result-sets. 
               
         ** Syntax of Select Query ** :
            """"""""""""""""""""""""""""
             + The basic syntax of the SELECT statement is as follows −
       _______________________________________________________
      |  SELECT column1, column2, columnN FROM table_name;    |
      |_______________________________________________________|
    
     + Here, column1, column2... are the fields of a table whose values you
       want to fetch.
     + If you want to fetch all the fields available in the field, then you
       can use the following "syntax" - 
    _________________________________
   |  SELECT * FROM table_name;      |
   |_________________________________| 
           
        ** Example of Select Query ** : 
           =============================
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     +----+----------+-----+-----------+----------+
        
   * The following code is an example, which would fetch the ID, Name and 
     Salary fields of the customers available in "CUSTOMERS" table.
                                                  '''''''''
   This would produce the following result −
    
      +----+----------+----------+
      | ID | NAME     | SALARY   |
      +----+----------+----------+
      |  1 | Ramesh   |  2000.00 |
      |  2 | Khilan   |  1500.00 |
      |  3 | kaushik  |  2000.00 |
      |  4 | Chaitali |  6500.00 |
      |  5 | Hardik   |  8500.00 |
      |  6 | Komal    |  4500.00 |
      |  7 | Muffy    | 10000.00 |
      +----+----------+----------+
   
    * If you want to fetch all the fields of the CUSTOMERS table, then
      you should use the following query, 
        ___________________________________
       |  SQL> SELECT * FROM CUSTOMERS;    |
       |___________________________________|
    
    * This would produce the result as shown below,
       
        +----+----------+-----+-----------+----------+
        | ID | NAME     | AGE | ADDRESS   | SALARY   |
        +----+----------+-----+-----------+----------+
        |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 | 
        |  2 | Khilan   |  25 | Delhi     |  1500.00 |
        |  3 | kaushik  |  23 | Kota      |  2000.00 |
        |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
        |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
        |  6 | Komal    |  22 | MP        |  4500.00 |
        |  7 | Muffy    |  24 | Indore    | 10000.00 |
        +----+----------+-----+-----------+----------+ 
__________________________________________________
                                                  |
      SQL - Select Query                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Select Query
                                                                                        
2) Definition of SQL - Select Query ?
-------------------------------------
*
 
3) What is SQL - Select Query About ?
-------------------------------------
*
*

4) What does SQL - Select Query Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Select Query :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Select Query :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Select Query :
-----------------------------------
*
*
__________________________________________________________________________________

 16. <<<<<<<<< SQL - Where Clause >>>>>>>>>
       
 ** The SQL WHERE clause is used to specify a condition while fetching the
    data from a single table or by joining with multiple tables.
  * If the given condition is satisfied, then only it returns a specific 
    value from the table. 
  * You should use the WHERE clause to filter the records and fetching
    only the necessary records. 
  
 ** The WHERE clause is not only used in the SELECT statement, but it 
    is also used in the "UPDATE", 'DELETE' statement, etc., 
    which we would examine in the subsequent chapters. 
           
         ** Syntax of Where Clause -
            '''''''''''''''''''''''''
     The basic syntax of the SELECT statement with the WHERE clause is
     as shown below. 
     _______________________________________
    |  SELECT column1, column2, columnN     |
    |  FROM table_name                      |
    |  WHERE [condition]                    |
    |_______________________________________| 
    
  * You can specify a condition using the comparison or logical operators
    like >, <, =, LIKE, NOT, etc.
  * The following examples would make this concept clear.
         
       ** Example of Where Clause -
          ''''''''''''''''''''''''''
          Consider the CUSTOMERS table having the following records −
          
       +----+----------+-----+-----------+----------+
       | ID | NAME     | AGE | ADDRESS   | SALARY   | 
       +----+----------+-----+-----------+----------+
       |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
       |  2 | Khilan   |  25 | Delhi     |  1500.00 |
       |  3 | kaushik  |  23 | Kota      |  2000.00 |
       |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
       |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
       |  6 | Komal    |  22 | MP        |  4500.00 |
       |  7 | Muffy    |  24 | Indore    | 10000.00 |
       +----+----------+-----+-----------+----------+
    
    * The following code is an example which would fetch the ID, Name and
      Salary fields from the "CUSTOMERS" table, where the salary is 
      greater than 2000 −
      ___________________________________ 
     |  SQL> SELECT ID, NAME, SALARY     | 
     |  FROM CUSTOMERS                   | 
     |  WHERE SALARY > 2000;             | 
     |___________________________________|
        
       * This would produce the following result −
     
     +----+----------+----------+
     | ID | NAME     | SALARY   |
     +----+----------+----------+
     |  4 | Chaitali |  6500.00 |
     |  5 | Hardik   |  8500.00 |
     |  6 | Komal    |  4500.00 |
     |  7 | Muffy    | 10000.00 |
     +----+----------+----------+
    
    * The following query is an example, which would fetch the ID, Name and
      Salary fields from the CUSTOMERS table for a customer with the name 
      "Hardik",
       """""" 
   <^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^>
   < Here, it is important to note that all the strings should be >
   < given inside singkle quotes("). Whereas, numeric values      >
   < should be given without any quote as in the above example.   >
   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  
     
      ____________________________________
     |  SQL> SELECT ID, NAME, SALARY      | 
     |  FROM CUSTOMERS                    |
     |  WHERE NAME = 'Hardik';            |  
     |____________________________________| 
        
         +----+----------+----------+
         | ID | NAME     | SALARY   |
         +----+----------+----------+
         |  5 | Hardik   |  8500.00 |
         +----+----------+----------+
__________________________________________________
   SQL - Where Clause                             |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Where Clause
                                                                                        
2) Definition of SQL - Where Clause ?
-------------------------------------
*
 
3) What is SQL - Where Clause About ?
-------------------------------------
*
*

4) What does SQL - Where Clause Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Where Clause :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Where Clause :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Where Clause :
-----------------------------------
*
*
_________________________________________________________________________________

 17. <<<<<<<<< SQL - AND & OR Clauses >>>>>>>>>
       
    * The SQL AND & OR operators are used to combine multiple conditions
      to narrow data in an SQL statement.
    * These two operators are called as the conjunctive operators.
    
    * These operators provide a means to make multiple comparisons with
      different operators in the same SQL statement. 
          
        (A) The AND Operator :
            ==================  
       * The AND operator allows the existence of multiple conditions in 
         an SQL statement's WHERE clause.
       
             * Syntax of AND Operator -
               ----------------------
             The basic syntax of the AND operator with a WHERE clause is
             as follows -
       _______________________________________________________________
      |  SELECT column1, column2, columnN                             |
      |  FROM table_name                                              |
      |  WHERE [condition1] AND [condition2]...AND [conditionN];      |
      |_______________________________________________________________|
        
   * You can combine "N" number of conditions using the "AND" operator.   
     For an action to be taken by the SQL statement, whether it be
     a transaction or a query, all conditions seperated by the "AND" 
     must be "TRUE".                                            '''
              '''' 
              * Example -
                --------
                Consider the CUSTOMERS table having the following records - 
                
                +----+----------+-----+-----------+----------+
                | ID | NAME     | AGE | ADDRESS   | SALARY   |
                +----+----------+-----+-----------+----------+
                |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
                |  2 | Khilan   |  25 | Delhi     |  1500.00 |
                |  3 | kaushik  |  23 | Kota      |  2000.00 |
                |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
                |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
                |  6 | Komal    |  22 | MP        |  4500.00 |
                |  7 | Muffy    |  24 | Indore    | 10000.00 |
                +----+----------+-----+-----------+----------+
            
       * Following is an example, which would fetch the ID, Name and 
         Salary fields from the "CUSTOMERS" table, where the salary is
         greater than 2000 and the age is less than 25 years -
       ___________________________________________
      |  SQL> SELECT ID, NAME, SALARY             |
      |  FROM CUSTOMERS                           |
      |  WHERE SALARY > 2000 AND age < 25;        |
      |___________________________________________|
        
       * This would produce the following result −
             
          +----+-------+----------+
          | ID | NAME  | SALARY   |
          +----+-------+----------+
          |  6 | Komal |  4500.00 |
          |  7 | Muffy | 10000.00 |
          +----+-------+----------+

        (B) The OR Operator :
            =================
        * The OR operator is used to combine multiple conditions in an
          SQL statement's WHERE clause. 
           
            ** Syntax of OR Operator -
               -----------------------
       The basic syntax of the OR operator with a WHERE clause is as 
       follows - 
       _________________________________________________________
      |  SELECT column1, column2, columnN                       |
      |  FROM table_name                                        |
      |  WHERE [condition1] OR [condition2]...OR [conditionN]   |
      |_________________________________________________________|
         
   * You can combine N number of conditions using the OR operator.
   * For an action to be taken by the SQL statement, whether it be
     a transaction or query, the only any ONE of the conditions 
     seperated by the OR must be "TRUE".  
        
    Example :
    Consider the "CUSTOMERS" table having the following records -
      
       +----+----------+-----+-----------+----------+
       | ID | NAME     | AGE | ADDRESS   | SALARY   |
       +----+----------+-----+-----------+----------+
       |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
       |  2 | Khilan   |  25 | Delhi     |  1500.00 |
       |  3 | kaushik  |  23 | Kota      |  2000.00 |
       |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
       |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
       |  6 | Komal    |  22 | MP        |  4500.00 |
       |  7 | Muffy    |  24 | Indore    | 10000.00 |
       +----+----------+-----+-----------+----------+ 
 
  *  The following code block hasa query, which would fetch the ID, Name
     and Salary fields from the "CUSTOMERS" table, where the Salary is
     greater than 2000 OR the age is less than 25 years. 
       _______________________________________
      |  SQL> SELECT ID, NAME, SALARY         |
      |  FROM CUSTOMERS                       | 
      |  WHERE SALARY > 2000 OR age < 25;     |
      |_______________________________________|
    
         This would produce the following result −
      
      +----+----------+----------+
      | ID | NAME     | SALARY   |
      +----+----------+----------+
      |  3 | kaushik  |  2000.00 |
      |  4 | Chaitali |  6500.00 |
      |  5 | Hardik   |  8500.00 |
      |  6 | Komal    |  4500.00 |
      |  7 | Muffy    | 10000.00 |
      +----+----------+----------+

__________________________________________________
                                                  |
       SQL - AND & OR Clauses                     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - AND & OR Clauses
                                                                                        
2) Definition of SQL - AND & OR Clauses ?
-----------------------------------------
*
 
3) What is SQL - AND & OR Clauses About ?
-----------------------------------------
*
*

4) What does SQL - AND & OR Clauses Do ?
----------------------------------------
*
*

5) Advantages/Benefits of SQL - AND & OR Clauses :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - AND & OR Clauses :
-----------------------------------------------------
*
*
*  

7) Examples of SQL - AND & OR Clauses :
---------------------------------------
*
*
__________________________________________________________________________________

 18. <<<<<<<<< SQL - Update Query >>>>>>>>>
       
   * The SQL UPDATE Query is used to modify the existing records in a 
     table.
   * You can use the WHERE clause with the UPDATE query to update the 
     selected rows, otherwise all the rows would be affected. 

       ** Syntax **
          ------
  The basic syntax of the UPDATE query with a WHERE clause is as follows -
    ____________________________________________________________________
   |  UPDATE table_name                                                 |
   |  SET column1 = value1, column2 = value2...., columnN = valueN      |
   |  WHERE [condition];                                                | 
   |____________________________________________________________________|
   
    * You can combine "N" number of conditions using the "AND" or the 
      "OR" operators. '''                                '''''
      ''''
            " Example " -
              ''''''''''''
         Consider the "CUSTOMERS" table having the following records -
         
        +----+----------+-----+-----------+----------+
        | ID | NAME     | AGE | ADDRESS   | SALARY   | 
        +----+----------+-----+-----------+----------+
        |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
        |  2 | Khilan   |  25 | Delhi     |  1500.00 |
        |  3 | kaushik  |  23 | Kota      |  2000.00 |
        |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
        |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
        |  6 | Komal    |  22 | MP        |  4500.00 |
        |  7 | Muffy    |  24 | Indore    | 10000.00 |
        +----+----------+-----+-----------+----------+
      
   ** The following query will update the ADDRESS for a customer whose ID 
      number is 6 in the table.
    ___________________________________
   |  SQL> UPDATE CUSTOMERS            |
   |  SET ADDRESS = 'Pune'             |
   |  WHERE ID = 6;                    |
   |___________________________________| 

    * Now, the "CUSTOMERS" table would have the following records − 
                """""""""
    +----+----------+-----+-----------+----------+
    | ID | NAME     | AGE | ADDRESS   | SALARY   |
    +----+----------+-----+-----------+----------+
    |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
    |  2 | Khilan   |  25 | Delhi     |  1500.00 |
    |  3 | kaushik  |  23 | Kota      |  2000.00 |
    |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
    |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
    |  6 | Komal    |  22 | Pune      |  4500.00 |
    |  7 | Muffy    |  24 | Indore    | 10000.00 |
    +----+----------+-----+-----------+----------+ 
   
   * If you want to modify all the ADDRESS and the SALARY column values
     in the "CUSTOMERS" table, you do not need to use the WHERE clause 
     as the UPDATE query would be enough as shown in the following code
     block.  
       ____________________________________________
      |  SQL> UPDATE CUSTOMERS                     |
      |  SET ADDRESS = 'Pune', SALARY = 1000.00;   |
      |____________________________________________|

    * Now, "CUSTOMERS" table would have the following records −
            """""""""
      +----+----------+-----+---------+---------+
      | ID | NAME     | AGE | ADDRESS | SALARY  |
      +----+----------+-----+---------+---------+
      |  1 | Ramesh   |  32 | Pune    | 1000.00 |
      |  2 | Khilan   |  25 | Pune    | 1000.00 |
      |  3 | kaushik  |  23 | Pune    | 1000.00 |
      |  4 | Chaitali |  25 | Pune    | 1000.00 |
      |  5 | Hardik   |  27 | Pune    | 1000.00 |
      |  6 | Komal    |  22 | Pune    | 1000.00 |
      |  7 | Muffy    |  24 | Pune    | 1000.00 |
      +----+----------+-----+---------+---------+

__________________________________________________
                                                  |
       SQL - Update Query                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Update Query
                                                                                        
2) Definition of SQL - Update Query ?
-------------------------------------
*
 
3) What is SQL - Update Query About ?
-------------------------------------
*
*

4) What does SQL - Update Query Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Update Query :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Update Query :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Update Query :
-----------------------------------
*
*
__________________________________________________________________________________

 19. <<<<<<<<< SQL - Delete Query >>>>>>>>>
       
    * The "SQL DELETE" Query is used to delete the existing records from
      a table. 
    * You can use the WHERE clause with a DELETE query to delete the 
      selected rows, otherwise all the records would be deleted. 
     
         ** Syntax of Delete Query -
            """""""""""""""""""""""""
      _____________________________
     |  DELETE FROM table_name     |
     |  WHERE [condition];         |
     |_____________________________|
 
 * You can combine "N" number of conditions using "AND" or "OR" operators.
                   '''                            '''''    ''''    
        ** Example -
           """""""""
     Consider the CUSTOMERS table having the following records −
     
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     +----+----------+-----+-----------+----------+

   * The following code has a query, which will "DELETE" a customer, whose
     "ID" is 6.                                  ''''''
     '''' 
      __________________________________
     |  SQL> DELETE FROM CUSTOMERS      |
     |  WHERE ID = 6;                   | 
     |__________________________________|
     
   * Now, the CUSTOMERS table would have the following records :
              '''''''''
        +----+----------+-----+-----------+----------+
        | ID | NAME     | AGE | ADDRESS   | SALARY   |
        +----+----------+-----+-----------+----------+
        |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
        |  2 | Khilan   |  25 | Delhi     |  1500.00 |
        |  3 | kaushik  |  23 | Kota      |  2000.00 |
        |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
        |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
        |  7 | Muffy    |  24 | Indore    | 10000.00 |
        +----+----------+-----+-----------+----------+

   *  If you want to DELETE all the records from the CUSTOMERS table,
      you do not need to use the "WHERE" clause and the "DELETE" query
      would be as follows -
       _________________________________
      |  SQL> DELETE FROM CUSTOMERS;    |
      |_________________________________|
     
   *  Now, the "CUSTOMERS" table would not have any record.
                """""""""
__________________________________________________
                                                  |
       SQL - Delete Query                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Delete Query
                                                                                        
2) Definition of SQL - Delete Query ?
-------------------------------------
*
 
3) What is SQL - Delete Query About ?
-------------------------------------
*
*

4) What does SQL - Delete Query Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Delete Query :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Delete Query :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Delete Query :
-----------------------------------
*
*
__________________________________________________________________________________

 20. <<<<<<<<< SQL - Like Clause >>>>>>>>> 
      
  * The SQL LIKE clause is used to compare a value to similar values 
    using wildcard operators.
  * There are 'two wildcards' used in conjunction with the "LIKE" operator.
                                                         ''''''
     =  The percent sign (%)
     =  The underscore (_)
    
  *  The percent sign represents zero, one or multiple characters.
  *  The underscore represents a single number or character.
  *  These symbols can be used in combinations. 
       
       ** Syntax of % and _  : 
          ---------------------
    _____________________________________________
   |  SELECT FROM table_name
   |  WHERE column LIKE 'XXXX%'
   |
   |  or 
   | 
   |  SELECT FROM table_name
   |  WHERE column LIKE '%XXXX%'
   |
   |  or
   |
   |  SELECT FROM table_name
   |  WHERE column LIKE 'XXXX_'
   |
   |  or
   |
   |  SELECT FROM table_name
   |  WHERE column LIKE '_XXXX'
   |  
   |  or
   |
   |  SELECT FROM table_name
   |  WHERE column LIKE '_XXXX_' 
   |_______________________________________________
  
  * You can combine N number of conditions using AND or OR operators.
  * Here, XXXX could be any numeric or string value. 
           
            Example :
   * The following table has a few examples showing the WHERE part
     having different LIKE clause with '%' and '_' operators -
 ____________________________________________________________________________
|   Sr.No.	|             TYPE & Description                             |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  WHERE SALARY LIKE '200%'                                  |
|               |                                                            |
|               |  Finds any values that start with 200.                     |
|_______________|____________________________________________________________|
|      2        |  WHERE SALARY LIKE '%200%'                                 |
|               |                                                            |
|               |  Finds any values that have 200 in any position.           |
|_______________|____________________________________________________________|
|      3        |  WHERE SALARY LIKE '_00%'                                  |
|               |                                                            |
|               |  Finds any values that have 00 in the second and third     |
|               |  positions.                                                |                    
|_______________|____________________________________________________________|
|      4        |  WHERE SALARY LIKE '2_%_%'                                 | 
|               |                                                            |
|               |  Finds any values that start with 2 and are at least 3     |
|               |  characters in length.                                     |                 
|_______________|____________________________________________________________|
|      5        |  WHERE SALARY LIKE '%2'                                    |
|               |                                                            |
|               |  Finds any values that end with 2.                         |                   
|_______________|____________________________________________________________|
|      6        |  WHERE SALARY LIKE '_2%3                                   | 
|               |                                                            |
|               |  Finds any values that have a 2 in the second position and |
|               |  end with a 3                                              |                  
|_______________|____________________________________________________________|
|      7        |  WHERE SALARY LIKE '2___3'                                 | 
|               |                                                            |
|               |  Finds any values in a five-digit number that start with 2 |
|               |  and end with 3.                                           |                  
|_______________|____________________________________________________________|
  
   * Let us take a real example, consider the CUSTOMERS table having the 
     records as shown below :-

      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
   
   Following is an example, which would display all the records
   from the CUSTOMERS table, where the SALARY starts with 200.
     ______________________________________
    |  SQL> SELECT * FROM CUSTOMERS        |
    |  WHERE SALARY LIKE '200%';           |
    |______________________________________|
  
   * This would produce the following result −
      
    +----+----------+-----+-----------+----------+
    | ID | NAME     | AGE | ADDRESS   | SALARY   |
    +----+----------+-----+-----------+----------+
    |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
    |  3 | kaushik  |  23 | Kota      |  2000.00 |
    +----+----------+-----+-----------+----------+
__________________________________________________
                                                  |
       SQL - Like Clause                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Like Clause
                                                                                        
2) Definition of SQL - Like Clause ?
------------------------------------
*
 
3) What is SQL - Like Clause About ?
------------------------------------
*
*

4) What does SQL - Like Clause Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Like Clause :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Like Clause :
------------------------------------------------
*
*
*  

7) Examples of SQL - Like Clause :
----------------------------------
*
*
_________________________________________________________________________________

 21. <<<<<<<<< SQL - Top Clause >>>>>>>>>

     <<<<<<<<< SQL - TOP, LIMIT or ROWNUM Clause >>>>>>>>
   
  * The SQL TOP clause is used to fetch a TOP N number or X percent
    records from a table. 
  
    Note - 
    *  All the databases do not support the TOP clause. 
       For example, MySQL supports the "LIMIT" clause to fetch limited
       number of records while Oracle uses the "ROWNUM" command to 
       fetch a limited number of records. 
    
           Syntax of Top Clause :
           '''''''''''''''''''''''
          The basic syntax of the TOP clause with a SELECT statement
          would be as follows -
      ________________________________________________
     |  SELECT TOP number|percent column_name(s)
     |  FROM table_name
     |  WHERE [condition]
     |________________________________________________
        
            Example- 
      Consider the "CUSTOMERS" Table having the following records -
        
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |  
     +----+----------+-----+-----------+----------+
 
   * The following query is an example on the SQL server, which would 
     fetch the top 3 records from the "CUSTOMERS" table -
                                       """""""""
      _________________________________________
     |   SQL> SELECT TOP 3 * FROM CUSTOMERS;   |
     |_________________________________________|
    
         * This would produce the following result −
   
      +----+---------+-----+-----------+---------+
      | ID | NAME    | AGE | ADDRESS   | SALARY  |
      +----+---------+-----+-----------+---------+
      |  1 | Ramesh  |  32 | Ahmedabad | 2000.00 |
      |  2 | Khilan  |  25 | Delhi     | 1500.00 |
      |  3 | kaushik |  23 | Kota      | 2000.00 |
      +----+---------+-----+-----------+---------+
    
  * If you are using MySQL server, then here is an equivalent example −
      __________________________________
     |  SQL> SELECT * FROM CUSTOMERS
     |  LIMIT 3;
     |__________________________________
   
   * This would produce the following result −
     
      +----+---------+-----+-----------+---------+
      | ID | NAME    | AGE | ADDRESS   | SALARY  |
      +----+---------+-----+-----------+---------+
      |  1 | Ramesh  |  32 | Ahmedabad | 2000.00 |
      |  2 | Khilan  |  25 | Delhi     | 1500.00 |
      |  3 | kaushik |  23 | Kota      | 2000.00 |
      +----+---------+-----+-----------+---------+
   
    * If you are using an Oracle server, then the following code block
      has an equivalent example.   
    ___________________________________
   |  SQL> SELECT * FROM CUSTOMERS
   |  WHERE ROWNUM <= 3; 
   |___________________________________
         
     This would produce the following result −
       
       +----+---------+-----+-----------+---------+
       | ID | NAME    | AGE | ADDRESS   | SALARY  |
       +----+---------+-----+-----------+---------+
       |  1 | Ramesh  |  32 | Ahmedabad | 2000.00 |
       |  2 | Khilan  |  25 | Delhi     | 1500.00 |
       |  3 | kaushik |  23 | Kota      | 2000.00 |
       +----+---------+-----+-----------+---------+
__________________________________________________
                                                  |
      SQL - Top Clause                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Top Clause
                                                                                        
2) Definition of SQL - Top Clause ?
-----------------------------------
*
 
3) What is SQL - Top Clause About ?
-----------------------------------
*
*

4) What does SQL - Top Clause Do ?
----------------------------------
*
*

5) Advantages/Benefits of SQL - Top Clause :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Top Clause :
-----------------------------------------------
*
*
*  

7) Examples of SQL - Top Clause :
---------------------------------
*
*
_______________________________________________________________________________

 22. <<<<<<<<< SQL - Order By >>>>>>>>>
    
  * The SQL ORDER BY clause is used to sort the data in ascending
    or descending order, based on one or more columns.
  * Some databases sort the query results in an ascending order by default.
         
         Syntax of Order By :
         """"""""""""""""""""" 
         The basic syntax of the ORDER BY clause is as follows − 
     ________________________________________________________________
    |  SELECT column-list 
    |  FROM table_name 
    |  [WHERE condition] 
    |  [ORDER BY column1, column2, .. columnN] [ASC | DESC]; 
    |________________________________________________________________
       
     * You can use more than one column in the ORDER BY clause.
     * Make sure whatever column you are using to sort that column 
       should be in the column-list. 
          
          Example -
          '''''''''''
          Consider the CUSTOMERS table having the following records − 
      
        +----+----------+-----+-----------+----------+
        | ID | NAME     | AGE | ADDRESS   | SALARY   |
        +----+----------+-----+-----------+----------+
        |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
        |  2 | Khilan   |  25 | Delhi     |  1500.00 |
        |  3 | kaushik  |  23 | Kota      |  2000.00 |
        |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
        |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
        |  6 | Komal    |  22 | MP        |  4500.00 |
        |  7 | Muffy    |  24 | Indore    | 10000.00 |
        +----+----------+-----+-----------+----------+
   
  * The following code block has an example, which would sort the result
    in an ascending order by the "NAME" and the "SALARY" -
       ______________________________________
      |  SQL> SELECT * FROM CUSTOMERS
      |     ORDER BY NAME, SALARY;
      |______________________________________ 
      
       This would produce the following result − 
    
        +----+----------+-----+-----------+----------+
        | ID | NAME     | AGE | ADDRESS   | SALARY   |
        +----+----------+-----+-----------+----------+
        |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
        |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
        |  3 | kaushik  |  23 | Kota      |  2000.00 |
        |  2 | Khilan   |  25 | Delhi     |  1500.00 |
        |  6 | Komal    |  22 | MP        |  4500.00 |
        |  7 | Muffy    |  24 | Indore    | 10000.00 |
        |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
        +----+----------+-----+-----------+----------+

  * The following code block has an example, which would sort the result 
    in the descending order by "NAME".
      __________________________________
     |  SQL> SELECT * FROM CUSTOMERS    |
     |     ORDER BY NAME DESC;          | 
     |__________________________________|
  
    This would produce the following result − 
      
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 | 
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 | 
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      +----+----------+-----+-----------+----------+
__________________________________________________
                                                  |
      SQL - Order By                              |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Order By
                                                                                        
2) Definition of SQL - Order By ?
----------------------------------
*
 
3) What is SQL - Order By About ?
---------------------------------
*
*

4) What does SQL - Order By Do ?
--------------------------------
*
*

5) Advantages/Benefits of SQL - Order By :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Order By :
---------------------------------------------
*
*
*  

7) Examples of SQL - Order By :
-------------------------------
*
*
_______________________________________________________________________________

 23. <<<<<<<<< SQL - Group By >>>>>>>>>
      
  * The SQL GROUP BY clause is used in collaboration with the SELECT 
    statement to arrange identical data into groups. 
  * This GROUP BY clause follows the WHERE clause in a SELECT statement
    and precedes the ORDER BY clause. 
          
       Syntax 0f Group By :
       """""""""""""""""""""
  + The basic syntax of a GROUP BY clause is shown in the following code
    block. 
  + The "GROUP BY" clause must follow the conditions in the WHERE clause
    and must precede the ORDER BY clause if one is used.
      __________________________________________________
     |  SELECT column1, column2                
     |  FROM table_name
     |  WHERE [ conditions ]
     |  GROUP BY column1, column2
     |  ORDER BY column1, column2
     |__________________________________________________
     
       Example :
       '''''''''
       Consider the "CUSTOMERS" table is having the following records −
                     '''''''''
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
   
   *  If you want to know the total amount of the salary on each customer,
      then the GROUP BY query would be as follows :
    ___________________________________________________
   |  SQL> SELECT NAME, SUM(SALARY) FROM CUSTOMERS     |
   |     GROUP BY NAME;                                |
   |___________________________________________________|
      
       This would produce the following result −
    
      +----------+-------------+
      | NAME     | SUM(SALARY) |
      +----------+-------------+
      | Chaitali |     6500.00 |
      | Hardik   |     8500.00 |
      | kaushik  |     2000.00 |
      | Khilan   |     1500.00 |
      | Komal    |     4500.00 |
      | Muffy    |    10000.00 |
      | Ramesh   |     2000.00 |
      +----------+-------------+
  
     * Now, let us look at a table where the "CUSTOMERS" table has the 
       following records with duplicate names :  
   
        +----+----------+-----+-----------+----------+
        | ID | NAME     | AGE | ADDRESS   | SALARY   |
        +----+----------+-----+-----------+----------+
        |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
        |  2 | Ramesh   |  25 | Delhi     |  1500.00 |
        |  3 | kaushik  |  23 | Kota      |  2000.00 |
        |  4 | kaushik  |  25 | Mumbai    |  6500.00 |
        |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
        |  6 | Komal    |  22 | MP        |  4500.00 |
        |  7 | Muffy    |  24 | Indore    | 10000.00 |
        +----+----------+-----+-----------+----------+
  
   * Now again, if you want to know the total amount of salary on each
     customer, then the "GROUP BY" query would be as follows -
                         ''''''''
    _____________________________________________________
   |  SQL> SELECT NAME, SUM(SALARY) FROM CUSTOMERS       | 
   |     GROUP BY NAME;                                  |
   |_____________________________________________________| 
    
      * This would produce the following result −

    +---------+-------------+
    | NAME    | SUM(SALARY) |
    +---------+-------------+
    | Hardik  |     8500.00 |
    | kaushik |     8500.00 |
    | Komal   |     4500.00 |
    | Muffy   |    10000.00 |
    | Ramesh  |     3500.00 | 
    +---------+-------------+  
    
   * The SQL "DISTINCT" keyword is used in conjunction with the "SELECT" 
     statement to eliminate all the duplicate records and fetching only
     unique records.  
   
   * There may be a situation when you have multiple duplicate records
     in a table.
   * While fetching such records, it makes more sense to fetch only those
     unique records instead of fetching duplicate records. 
      
        Syntax of Group By :
        ''''''''''''''''''''' 
    * The basic syntax of DISTINCT keyword to eliminate the duplicate
      records is as follows -
     __________________________________________________________
    |   SELECT DISTINCT column1, column2,.....columnN 
    |   FROM table_name
    |   WHERE [condition]
    |__________________________________________________________ 
       
         Example : 
         ''''''''''
     * Consider the CUSTOMERS table having the following records −
     
       +----+----------+-----+-----------+----------+
       | ID | NAME     | AGE | ADDRESS   | SALARY   |
       +----+----------+-----+-----------+----------+
       |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
       |  2 | Khilan   |  25 | Delhi     |  1500.00 |  
       |  3 | kaushik  |  23 | Kota      |  2000.00 |
       |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
       |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
       |  6 | Komal    |  22 | MP        |  4500.00 |
       |  7 | Muffy    |  24 | Indore    | 10000.00 |
       +----+----------+-----+-----------+----------+
    
    * First, let us see how the following SELECT query returns the 
      salary records.
       _________________________________________
      |  SQL> SELECT SALARY FROM CUSTOMERS
      |     ORDER BY SALARY;
      |_________________________________________ 
    
  * This would produce the following result, where the salary (2000)
    is coming twice which isa duplicate record from the original
    table. 
     
      +----------+
      | SALARY   |
      +----------+
      |  1500.00 |
      |  2000.00 |
      |  2000.00 |
      |  4500.00 |
      |  6500.00 |
      |  8500.00 |
      | 10000.00 |
      +----------+
   
   * Now, let us use the DISTINCT keyword with the above SELECT query
     and then see the result. 
     ___________________________________________________
    |  SQL> SELECT DISTINCT SALARY FROM CUSTOMERS
    |     ORDER BY SALARY;
    |___________________________________________________  
   
   * This would produce the following result where we do not have
     any duplicate entry. 
  
    +----------+
    | SALARY   |
    +----------+
    |  1500.00 |
    |  2000.00 |
    |  4500.00 |
    |  6500.00 |
    |  8500.00 |
    | 10000.00 |
    +----------+
__________________________________________________
                                                  |
       SQL - Group By                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Group By
                                                                                        
2) Definition of SQL - Group By ?
---------------------------------
*
 
3) What is SQL - Group By About ?
---------------------------------
*
*

4) What does SQL - Group By Do ?
--------------------------------
*
*

5) Advantages/Benefits of SQL - Group By :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Group By :
---------------------------------------------
*
*
*  

7) Examples of SQL - Group By :
-------------------------------
*
*
_______________________________________________________________________________

 24. <<<<<<<<< SQL - Distinct Keyword >>>>>>>>>
       
      * The SQL "DISTINCT" keyword is used in conjunction with the "SELECT" 
     statement to eliminate all the duplicate records and fetching only
     unique records.  
   
   * There may be a situation when you have multiple duplicate records
     in a table.
   * While fetching such records, it makes more sense to fetch only those
     unique records instead of fetching duplicate records. 
      
        Syntax of Group By :
        ''''''''''''''''''''' 
    * The basic syntax of DISTINCT keyword to eliminate the duplicate
      records is as follows -
     __________________________________________________________
    |   SELECT DISTINCT column1, column2,.....columnN 
    |   FROM table_name
    |   WHERE [condition]
    |__________________________________________________________ 
       
         Example : 
         ''''''''''
     * Consider the CUSTOMERS table having the following records −
     
       +----+----------+-----+-----------+----------+
       | ID | NAME     | AGE | ADDRESS   | SALARY   |
       +----+----------+-----+-----------+----------+
       |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
       |  2 | Khilan   |  25 | Delhi     |  1500.00 |  
       |  3 | kaushik  |  23 | Kota      |  2000.00 |
       |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
       |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
       |  6 | Komal    |  22 | MP        |  4500.00 |
       |  7 | Muffy    |  24 | Indore    | 10000.00 |
       +----+----------+-----+-----------+----------+
    
    * First, let us see how the following SELECT query returns the 
      salary records.
       _________________________________________
      |  SQL> SELECT SALARY FROM CUSTOMERS
      |     ORDER BY SALARY;
      |_________________________________________ 
    
  * This would produce the following result, where the salary (2000)
    is coming twice which isa duplicate record from the original
    table. 
     
      +----------+
      | SALARY   |
      +----------+
      |  1500.00 |
      |  2000.00 |
      |  2000.00 |
      |  4500.00 |
      |  6500.00 |
      |  8500.00 |
      | 10000.00 |
      +----------+
   
   * Now, let us use the DISTINCT keyword with the above SELECT query
     and then see the result. 
     ___________________________________________________
    |  SQL> SELECT DISTINCT SALARY FROM CUSTOMERS
    |     ORDER BY SALARY;
    |___________________________________________________  
   
   * This would produce the following result where we do not have
     any duplicate entry. 
  
    +----------+
    | SALARY   |
    +----------+
    |  1500.00 |
    |  2000.00 |
    |  4500.00 |
    |  6500.00 |
    |  8500.00 |
    | 10000.00 |
    +----------+
__________________________________________________
                                                  |
      SQL - Distinct Keyword                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Distinct Keyword
                                                                                        
2) Definition of SQL - Distinct Keyword ?
-----------------------------------------
*
 
3) What is SQL - Distinct Keyword About ?
-----------------------------------------
*
*

4) What does SQL - Distinct Keyword Do ?
----------------------------------------
*
*

5) Advantages/Benefits of SQL - Distinct Keyword :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Distinct Keyword :
-----------------------------------------------------
*
*
*  

7) Examples of SQL - Distinct Keyword :
---------------------------------------
*
*
_______________________________________________________________________________

 25. <<<<<<<<< SQL - Sorting Results >>>>>>>>>
     
    * The SQL "ORDER BY" clause is used to sort the data in ascending 
      or descending order, based on one or more columns.
    * Some databases sort the query results in an ascending order 
      by default.
           
            Syntax of Sorting Results :
            ''''''''''''''''''''''''''''
    * The basic syntax of the ORDER BY clause which would be used to sort
      the result in an ascending or descending order is as follows - 
 
     _____________________________________________________________
    |  SELECT column-list 
    |  FROM table_name 
    |  [WHERE condition] 
    |  [ORDER BY column1, column2, .. columnN] [ASC | DESC];
    |_____________________________________________________________
 
   + You can use more than one column in the ORDER BY clause. 
   + Make sure that whatever column you are using to sort, that column 
     should be in the column-list. 
        
        	Example :
                ''''''''''' 
        Consider the "CUSTOMERS" table having the following records −
                      '''''''''
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
 
    * Following is an example, which would sort the result in an ascending
      order by NAME and SALARY.
     _______________________________________
    |  SQL> SELECT * FROM CUSTOMERS
    |     ORDER BY NAME, SALARY;
    |_______________________________________
       
        This would produce the following result −
   
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     +----+----------+-----+-----------+----------+
  
   * The following code block has an example, which would sort the 
     result in descending order by "NAME". 
                                    ''''
    _________________________________________
   |  SQL> SELECT * FROM CUSTOMERS           |
   |     ORDER BY NAME DESC;                 |  
   |_________________________________________| 
   
       This would produce the following result −  
     
    +----+----------+-----+-----------+----------+
    | ID | NAME     | AGE | ADDRESS   | SALARY   |
    +----+----------+-----+-----------+----------+
    |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
    |  7 | Muffy    |  24 | Indore    | 10000.00 |
    |  6 | Komal    |  22 | MP        |  4500.00 |
    |  2 | Khilan   |  25 | Delhi     |  1500.00 |
    |  3 | kaushik  |  23 | Kota      |  2000.00 |
    |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
    |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
    +----+----------+-----+-----------+----------+
  
   * To fetch the rows with their own preferred order, the SELECT query
     used would be as follows -   
    ____________________________________________
   |  SQL> SELECT * FROM CUSTOMERS              
   |     ORDER BY (CASE ADDRESS                  
   |     WHEN 'DELHI' 	       THEN 1           
   |     WHEN 'BHOPAL' 	       THEN 2           
   |     WHEN 'KOTA'   THEN 3                   
   |     WHEN 'AHMEDABAD' THEN 4                
   |     WHEN 'MP'    THEN 5                    
   |     ELSE 100 END) ASC, ADDRESS DESC;       
   |____________________________________________
  
       This would produce the following result − 
    
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     +----+----------+-----+-----------+----------+
   
   * This will sort the customers by ADDRESS in your ownoOrder of preference
     first and in a natural order for the remaining addresses.
   * Also, the remaining Addresses will be in the reverse alphabetical order. 
     
__________________________________________________
                                                  |
    SQL - Sorting Results                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Sorting Results
                                                                                        
2) Definition of SQL - Sorting Results ?
----------------------------------------
*
 
3) What is SQL - Sorting Results About ?
----------------------------------------
*
*

4) What does SQL - Sorting Results Do ?
---------------------------------------
*
*

5) Advantages/Benefits of SQL - Sorting Results :
-------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Sorting Results :
----------------------------------------------------
*
*
*  

7) Examples of SQL - Sorting Results :
--------------------------------------
*
*
_______________________________________________________________________________

        ** Advanced SQL **
           ============
           ============

1. <<<<<<<<< SQL - Constraints >>>>>>>>>
      
  *  Constraints are the rules enforced on the data columns of a table.
  *  These are used to limit the type of data that can go into a table.
  *  This ensures the accuracy and reliability of the data in the 
     database. 
  
  *  Constraints could be either on a column level or a table level.
  *  The column level constraints are applied only to one column,
     whereas the table level constraints are applied to the whole
     table.
  
    ** Some of the most commonly used 'constraints' available in SQL.
     * These constraints have already been discussed in "SQL - RDBMS
       Concepts" :                                        """"""""""""
       """"""""""""  
      
         (A) NOT NULL Constraint :
             ''''''''''''''''''''''
               * Ensures that a column cannot have NULL value.

         (B) DEFAULT Constraint :
             '''''''''''''''''''''
               * Provides a default value for a column when none is 
                 specified. 

         (C) UNIQUE Constraint :
             ''''''''''''''''''''
               * Ensures that all values in a column are different.

         (D) PRIMARY key :
             ''''''''''''''
               * Uniquely identifies each row/record in a database table.

         (E) FOREIGN Key :
             ''''''''''''''
               * Uniquely identifies a row/record in any of the given 
                 database table. 

         (F) CHECK Constraint :
             '''''''''''''''''''
               * The CHECK constraint ensures that all the values in a 
                 column satisfies certain conditions. 

         (G) INDEX :
             ''''''''
               *  Used to create and retrieve data from the database very
                  quickly. 
        
  ** Constraints can be specified when a table is created with the CREATE
     TABLE statement or you can use the ALTER TABLE statement to create
     constraints even after the table is created.  
     
        **** Dropping Constraints ****
             ~~~~~~~~~~~~~~~~~~~~
     + Any constraint that you have defined can be dropped using the ALTER
       TABLE command with the DROP CONSTRAINT option.
     
     + For example, to drop the primary key constraint in the EMPLOYEES
       table, you can use the following command :
    __________________________________________________________
   |  ALTER TABLE EMPLOYEES DROP CONSTRAINT EMPLOYEES_PK;     |
   |__________________________________________________________|
       
    * Some implementations may provide shortcuts for dropping certain
      constraints.
    * For example, to drop the primary key constraint for a table in 
      Oracle, you can use the following command.  
        _____________________________________________
       |  ALTER TABLE EMPLOYEES DROP PRIMARY KEY;    |
       |_____________________________________________|   
    
    * Some implementations allow you to disable constraints.
    * Instead of permanently dropping a constraint from the database, 
      you may want to temporarily disable the constraint and then 
      enable it later. 
 
        **** Integrity Constraints ****
             ~~~~~~~~~~~~~~~~~~~~~
     + 	Integrity constraints are used to ensure accuracy and consistency
        of the data in a relational database.
     +  Data Integrity is handled in a relational database through the concept
        of referential integrity.
     
     +  There are many types of integrity constraints that play a role in
        "Referential Integrity" (RI).
         '''''''''''''''''''''''''''''  
     + These constraints include Primary Key, Foreign Key, Unique Constraints 
       and other constraints which are mentioned above.  
__________________________________________________
                                                  |
     SQL - Constraints                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Constraints
                                                                                        
2) Definition of SQL - Constraints ?
------------------------------------
*
 
3) What is SQL - Constraints About ?
------------------------------------
*
*  

4) What does SQL - Constraints Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Constraints :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Constraints :
------------------------------------------------
*
*
*  

7) Examples of SQL - Constraints :
----------------------------------
*
*
_______________________________________________________________________________

 2. <<<<<<<<< SQL - Using Joins >>>>>>>>>
      
   * The SQL "Joins" clause is used to combine records from two or more
     tables in a database.
   * A 'JOIN' is a means for combining fields from two tables by 
     using values common to each. 
     
     Consider the following two tables -
     
       Table 1 - CUSTOMERS Table
      
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     +----+----------+-----+-----------+----------+
             
       Table 2 − ORDERS Table
     
     +-----+---------------------+-------------+--------+
     |OID  | DATE                | CUSTOMER_ID | AMOUNT |
     +-----+---------------------+-------------+--------+
     | 102 | 2009-10-08 00:00:00 |           3 |   3000 |
     | 100 | 2009-10-08 00:00:00 |           3 |   1500 |
     | 101 | 2009-11-20 00:00:00 |           2 |   1560 |
     | 103 | 2008-05-20 00:00:00 |           4 |   2060 |
     +-----+---------------------+-------------+--------+
    
   Now, let us join these two tables in our SELECT statement as 
   shown below -
     _____________________________________________________
    |  SQL> SELECT ID, NAME, AGE, AMOUNT
    |     FROM CUSTOMERS, ORDERS
    |     WHERE  CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
    |_____________________________________________________
   
        This would produce the following result.

       +----+----------+-----+--------+
       | ID | NAME     | AGE | AMOUNT |
       +----+----------+-----+--------+
       |  3 | kaushik  |  23 |   3000 |
       |  3 | kaushik  |  23 |   1500 |
       |  2 | Khilan   |  25 |   1560 |
       |  4 | Chaitali |  25 |   2060 |
       +----+----------+-----+--------+ 
   
  * Here, it is noticeable that the join is performed in the WHERE clause.
  * Several operators can be used to join tables, such as  =, <, >, <>,
    <=, >=, !=, BETWEEN, LIKE, and NOT;                    ''''''''''''
    '''''''''''''''''''''''''''''''''''
    they can all be used to join tables. 
  
      * However the most common operator is the equal to symbol.
                    ````````````````````        ````````
      * There are different types of joins available in SQL - 
 
          (A) INNER JOIN :
              '''''''''''''
               *  returns rows when there is a match in both tables.

          (B) LEFT JOIN :
              ''''''''''''
               * returns all rows from the left table, even if there are
                 no matches in the right table.

          (C) RIGHT JOIN :
              ''''''''''''' 
               * returns all rows from the right table, even if there
                 are no matches in the left table. 

          (D) FULL JOIN :
              ''''''''''''
               * returns rows when there is a match in one of the tables. 

          (E) SELF JOIN :
              ''''''''''''
               * is used to join a table to itself as if the table were
                 two tables, temporarily renaming at least one table in the 
                 SQL statement. 
  
          (F) CARTESIAN JOIN :
              '''''''''''''''''
               * returns the Cartesian product of the sets of records from
                 the two or more joined tables.   
__________________________________________________
                                                  |
      SQL - Using Joins                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Using Joins
                                                                                        
2) Definition of SQL - Using Joins ?
------------------------------------
*
 
3) What is SQL - Using Joins About ?
------------------------------------
*
*

4) What does SQL - Using Joins Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Using Joins :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Using Joins :
------------------------------------------------
*
*
*  

7) Examples of SQL - Using Joins :
----------------------------------
*
*
_______________________________________________________________________________

 3. <<<<<<<<< SQL - Unions Clause >>>>>>>>>
      
  * The SQL UNION clause/operator is used to combine the results of two
    or more SELECT statements without returning any duplicate rows.
    
         To use this "UNION clause", each "SELECT" statement must have :

            +  The same number of columns selected
            +  The same number of column expressions
            +  The same data type and
            +  Have them in the same order
       
      * But they need not have to be in the same length.

         Syntax of Unions Clause -
         '''''''''''''''''''''''''''
         The basic syntax of a UNION clause is as follows −
     __________________________________________________________
    |  SELECT column1 [, column2 ]
    |  FROM table1 [, table2 ]
    |  [WHERE condition]
    |
    |  UNION
    |  
    |  SELECT column1 [, column2 ]
    |  FROM table1 [, table2 ]
    |  [WHERE condition]
    |__________________________________________________________
     
   * Here, the given condition could be any given expression based on
     your requirement.
                     Example :
                     ''''''''''
                     Consider the following two tables.
                   
                    Table 1 − CUSTOMERS Table is as follows.
   
           +----+----------+-----+-----------+----------+
           | ID | NAME     | AGE | ADDRESS   | SALARY   |
           +----+----------+-----+-----------+----------+
           |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
           |  2 | Khilan   |  25 | Delhi     |  1500.00 | 
           |  3 | kaushik  |  23 | Kota      |  2000.00 |
           |  4 | Chaitali |  25 | Mumbai    |  6500.00 | 
           |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
           |  6 | Komal    |  22 | MP        |  4500.00 |
           |  7 | Muffy    |  24 | Indore    | 10000.00 |
           +----+----------+-----+-----------+----------+
    
                   Table 2 − ORDERS Table is as follows.

            +-----+---------------------+-------------+--------+
            |OID  | DATE                | CUSTOMER_ID | AMOUNT |
            +-----+---------------------+-------------+--------+
            | 102 | 2009-10-08 00:00:00 |           3 |   3000 |
            | 100 | 2009-10-08 00:00:00 |           3 |   1500 |
            | 101 | 2009-11-20 00:00:00 |           2 |   1560 |
            | 103 | 2008-05-20 00:00:00 |           4 |   2060 |
            +-----+---------------------+-------------+--------+
      
  *  Now, let us join these two tables in our SELECT statement as follows −
      _________________________________________________
     |  SQL> SELECT  ID, NAME, AMOUNT, DATE
     |     FROM CUSTOMERS
     |     LEFT JOIN ORDERS
     |     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID
     |  UNION ALL
     |     SELECT  ID, NAME, AMOUNT, DATE
     |     FROM CUSTOMERS
     |     RIGHT JOIN ORDERS
     |     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
     |_________________________________________________ 
   
    This would produce the following result −
  
     +------+----------+--------+---------------------+
     | ID   | NAME     | AMOUNT | DATE                |
     +------+----------+--------+---------------------+
     |    1 | Ramesh   |   NULL | NULL                |
     |    2 | Khilan   |   1560 | 2009-11-20 00:00:00 |
     |    3 | kaushik  |   3000 | 2009-10-08 00:00:00 |
     |    3 | kaushik  |   1500 | 2009-10-08 00:00:00 |
     |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |
     |    5 | Hardik   |   NULL | NULL                |
     |    6 | Komal    |   NULL | NULL                |
     |    7 | Muffy    |   NULL | NULL                | 
     |    3 | kaushik  |   3000 | 2009-10-08 00:00:00 |
     |    3 | kaushik  |   1500 | 2009-10-08 00:00:00 |
     |    2 | Khilan   |   1560 | 2009-11-20 00:00:00 |
     |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |
     +------+----------+--------+---------------------+
    
    * There are two other clauses (i.e., operators), which are like the 
      UNION clause.
    
  (A) SQL INTERSECT Clause -
      ````````````````````````
      * This is used to combine two SELECT statements, but returns rows
        only from the first "SELECT" statement that are identical to a row
        in the second SELECT statement.
    
  (B) SQL EXCEPT Clause -
      `````````````````````
      * This combines two SELECT statements and returns rows from the
        first SELECT statement that are not returned by the second
        SELECT statement.   
             
__________________________________________________
                                                  |
       SQL - Unions Clause                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Unions Clause
                                                                                        
2) Definition of SQL - Unions Clause ?
--------------------------------------
*
 
3) What is SQL - Unions Clause About ?
--------------------------------------
*
*

4) What does SQL - Unions Clause Do ?
-------------------------------------
*
*

5) Advantages/Benefits of SQL - Unions Clause :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Unions Clause :
--------------------------------------------------
*
*
*  

7) Examples of SQL - Unions Clause :
------------------------------------
*
*
_______________________________________________________________________________

 4. <<<<<<<<< SQL - NULL Values >>>>>>>>>

 ** The SQL NULL is the term used to represent a missing value.
  * A NULL value in a table is a value in a field that appears to be
    blank. 
  
 ** A field with a "NULL value" is a field with no value.
  * It is very important to understand that a "NULL value" is 
    different than a 'zero value' or a field that contains spaces.
       
       ** Syntax :
          '''''''''
          The basic syntax of NULL while creating a table.
      ____________________________________________________
     |  SQL> CREATE TABLE CUSTOMERS(
     |     ID   INT              NOT NULL,
     |     NAME VARCHAR (20)     NOT NULL,
     |     AGE  INT              NOT NULL,
     |     ADDRESS  CHAR (25) ,
     |     SALARY   DECIMAL (18, 2),       
     |     PRIMARY KEY (ID)
     |  );
     |_____________________________________________________   
  
  * Here, NOT NULL signifies that column should always accept an explicit
    value of the given data type.
  * There are two columns where we did not use NOT NULL, which means these
    columns could be "NULL".                    ````````
                     ````
   * A field with a "NULL" value is the one that has been left blank
     during the record creation. 
     
         Example :
         '''''''''''
     * The NULL value can cause problems when selecting data.
     * However, because when comparing an unknown value to any other 
       value, the result is always unknown and not included in the
       results. 
     * You must use the "IS NULL" or "IS NOT NULL" operators to check for
       a "NULL" value. 
     
     * Consider the following CUSTOMERS table having the records as
       shown below.
     
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 | 
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |          |
     |  7 | Muffy    |  24 | Indore    |          |
     +----+----------+-----+-----------+----------+
    
    * Now, following is the usage of the "IS NOT NULL" operator :
                                          '''''''''''
   ____________________________________________________
  |  SQL> SELECT  ID, NAME, AGE, ADDRESS, SALARY
  |     FROM CUSTOMERS
  |     WHERE SALARY IS NOT NULL;
  |____________________________________________________
     
      * This would produce the following result −
    
    +----+----------+-----+-----------+----------+
    | ID | NAME     | AGE | ADDRESS   | SALARY   |
    +----+----------+-----+-----------+----------+
    |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
    |  2 | Khilan   |  25 | Delhi     |  1500.00 |
    |  3 | kaushik  |  23 | Kota      |  2000.00 |
    |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
    |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
    +----+----------+-----+-----------+----------+
    
     Now, following is the usage of the "IS NULL" operator :
                                         ''''''''
   ____________________________________________________
  |  SQL> SELECT  ID, NAME, AGE, ADDRESS, SALARY
  |     FROM CUSTOMERS
  |     WHERE SALARY IS NULL;
  |____________________________________________________ 
     
     This would produce the following result −
     
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  6 | Komal    |  22 | MP        |          |
      |  7 | Muffy    |  24 | Indore    |          |
      +----+----------+-----+-----------+----------+
__________________________________________________
                                                  |
     SQL - NULL Values                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - NULL Values
                                                                                        
2) Definition of SQL - NULL Values ?
------------------------------------
*
 
3) What is SQL - NULL Values About ?
------------------------------------
*
*

4) What does SQL - NULL Values Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - NULL Values :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - NULL Values :
------------------------------------------------
*
*
*  

7) Examples of SQL - NULL Values :
----------------------------------
*
*
_______________________________________________________________________________

 5. <<<<<<<<< SQL - Alias Syntax >>>>>>>>>
   
  * You can rename a table or a column temporarily by giving another 
    name known as "Alias".
  * The use of table aliases is to rename a table in a specific SQL 
    statement. 
  * The renaming is a temporary change and the actual table name does
    not change in the database.
  * The column aliases are used to rename a table's column's for the 
    purpose of a particular SQL query. 
        
       ** Syntax :
          ''''''''''
        The basic syntax of a table alias is as follows :
    ____________________________________________________
   |  SELECT column1, column2....
   |  FROM table_name AS alias_name
   |  WHERE [condition];
   |____________________________________________________ 

  The basic syntax of a column alias is as follows :
   _______________________________________
  |  SELECT column_name AS alias_name
  |  FROM table_name
  |  WHERE [condition];
  |_______________________________________
      
      ** Example :
         ''''''''''
         Consider the following two tables.
  
       "Table 1" − CUSTOMERS Table is as follows.
   
   +----+----------+-----+-----------+----------+
   | ID | NAME     | AGE | ADDRESS   | SALARY   |
   +----+----------+-----+-----------+----------+  
   |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
   |  2 | Khilan   |  25 | Delhi     |  1500.00 |
   |  3 | kaushik  |  23 | Kota      |  2000.00 |
   |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
   |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
   |  6 | Komal    |  22 | MP        |  4500.00 |
   |  7 | Muffy    |  24 | Indore    | 10000.00 | 
   +----+----------+-----+-----------+----------+
           
        "Table 2" − ORDERS Table is as follows.
      
     +-----+---------------------+-------------+--------+
     |OID  | DATE                | CUSTOMER_ID | AMOUNT |
     +-----+---------------------+-------------+--------+
     | 102 | 2009-10-08 00:00:00 |           3 |   3000 |
     | 100 | 2009-10-08 00:00:00 |           3 |   1500 |
     | 101 | 2009-11-20 00:00:00 |           2 |   1560 |
     | 103 | 2008-05-20 00:00:00 |           4 |   2060 |
     +-----+---------------------+-------------+--------+
   
     Now, the following code block shows the usage of a table alias.
   ____________________________________________________
  |  SQL> SELECT C.ID, C.NAME, C.AGE, O.AMOUNT 
  |     FROM CUSTOMERS AS C, ORDERS AS O
  |     WHERE  C.ID = O.CUSTOMER_ID;
  |____________________________________________________
             
       This would produce the following result. 
       
    +----+----------+-----+--------+
    | ID | NAME     | AGE | AMOUNT |
    +----+----------+-----+--------+
    |  3 | kaushik  |  23 |   3000 |
    |  3 | kaushik  |  23 |   1500 |
    |  2 | Khilan   |  25 |   1560 |
    |  4 | Chaitali |  25 |   2060 |
    +----+----------+-----+--------+

    Following is the usage of a "column alias" :
                                 '''''''''''''
    ______________________________________________________________
   |  SQL> SELECT  ID AS CUSTOMER_ID, NAME AS CUSTOMER_NAME
   |     FROM CUSTOMERS
   |     WHERE SALARY IS NOT NULL;
   |______________________________________________________________
      
    This would produce the following result.
     
     +-------------+---------------+
     | CUSTOMER_ID | CUSTOMER_NAME |
     +-------------+---------------+
     |           1 | Ramesh        |
     |           2 | Khilan        |
     |           3 | kaushik       |
     |           4 | Chaitali      |
     |           5 | Hardik        |
     |           6 | Komal         |
     |           7 | Muffy         |
     +-------------+---------------+
__________________________________________________
                                                  |
      SQL - Alias Syntax                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Alias Syntax
                                                                                        
2) Definition of SQL - Alias Syntax ?
------------------------------------
* 
 
3) What is SQL - Alias Syntax About ?
-------------------------------------
* 
* 

4) What does SQL - Alias Syntax Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Alias Syntax :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Alias Syntax :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Alias Syntax :
-----------------------------------
*
*
________________________________________________________________________________

 6. <<<<<<<<< SQL - Indexes >>>>>>>>>
 
 ** Indexes are special lookup tables that the database search engine can
    use to speed up data retrieval.
  * Simply put, an index is a pointer to data in a table.
  * An index in a database is very similar to an index in the back of a 
    book. 
  
 ** For example, if you want to reference all pages in a book that discusses
    a certain topic, you first refer to the index, which lists all the 
    topics alphabetically and are then referred to one or more specific
    page numbers. 
  
 ** An index helps to speed up SELECT queries and WHERE clauses, but it
    slows down data input, with the "UPDATE" and the "INSERT" statements.
  * Indexes can be created or dropped with no effect on the data.

 ** Creating an index involves the CREATE INDEX statement, which allows
    you to name the index, to specify the table and which column or 
    columns to index, and to indicate whether the index is in an 
    ascending or descending order. 
 
 ** Indexes can also be unique, like the "UNIQUE" constraint, in that the
    index prevents duplicate entries in the column or combination of
    columns on which there is an index.
           
      " The CREATE INDEX Command " :
        ============================ 
        The basic syntax of a CREATE INDEX is as follows.
      ____________________________________________
     |  CREATE INDEX index_name ON table_name;    |
     |____________________________________________|
    
      A) Single-Column Indexes -
         ''''''''''''''''''''''''
         A single-column index is created based on only one table column.
         The basic syntax is as follows -
      ________________________________________
     |  CREATE INDEX index_name               | 
     |  ON table_name (column_name);          | 
     |________________________________________|
       
      B) Unique Indexes -
         ''''''''''''''''''
       * Unique indexes are used not only for performance, but also for data
         integrity.
       * A unique index does not allow any duplicate values to be inserted
         into the table.
       * The basic syntax is as follows -
       ______________________________________________
      |  CREATE UNIQUE INDEX index_name
      |  on table_name (column_name);
      |______________________________________________ 
     
      C) Composite Indexes -
         '''''''''''''''''''''
         * A composite index is an index on two or more columns of a table.
         * Its basic syntax is as follows.
      _________________________________________
     |  CREATE INDEX index_name
     |  on table_name (column1, column2);
     |_________________________________________
  
   ** Whether to create a single-column index or a composite index, take
      into consideration the column(s) that you may use very frequently 
      in query's "WHERE" clause as filter conditions. 

   ** Should there be only one column used, a single-column index 
      should be the choice.
    * Should there be two or more columns that are frequently used in the 
      WHERE clause as filters, the composite index would be the best 
      choice. 
      
     D) Implicit Indexes -
        ''''''''''''''''''''
      * Implicit indexes are indexes that are automatically created by the
        database server when an object is created.
      * Indexes are automatically created for primary key constraints and 
        unique constraints. 
   
       "The DROP INDEX Command" :
        ==========================
   * An index can be dropped using SQL DROP command.
   * Care should be taken when dropping an index because the performance
     may either slow down or improve.

         The basic syntax is as follows −
    ____________________________
   |  DROP INDEX index_name;    |
   |____________________________| 
    
     You can check the INDEX Constraint.
  
     ** When should indexes be avoided ?
        """""""""""""""""""""""""""""""""
        Although indexes are intended to enhance a database's performance,
        there are times when they should be avoided. 
      
     ** The following guidelines indicate when the use of an index should 
        be reconsidered :
           1) Indexes should not be used on small tables.
           2) Tables that have frequent, large batch updates or insert
              operations.  
           3) Indexes should not be used on columns that contain a high
              number of NULL values. 
           4) Columns that are frequently manipulated should not be
              indexed. 
__________________________________________________
    SQL - Indexes                                 |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Indexes
                                                                                        
2) Definition of SQL - Indexes ?
--------------------------------
*
 
3) What is SQL - Indexes About ?
--------------------------------
*
*

4) What does SQL - Indexes Do ?
-------------------------------
*
*

5) Advantages/Benefits of SQL - Indexes :
-----------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Indexes :
--------------------------------------------
*
*
*  

7) Examples of SQL - Indexes :
------------------------------
*
*
_______________________________________________________________________________

 7. <<<<<<<<< SQL - Alter Command >>>>>>>>>
    <<<<<<<<< SQL - ALTER TABLE Command >>>>>>>>>
     
     * The SQL ALTER TABLE command is used to add, delete or modify
       columns in an existing table.
     * You should also use the ALTER TABLE command to add and drop 
       various constraints on an existing table. 

    **Syntax of ALTER Command -
      ``````````````````````````
   The basic syntax of an "ALTER TABLE" command to add a "New Column"
   in an existing table is as follows.
     _____________________________________________________
    |  ALTER TABLE table_name ADD column_name datatype;   |
    |_____________________________________________________| 
  
   * The basic syntax of an "ALTER TABLE" command to "DROP COLUMN" in an
     existing table is as follows. 
     _____________________________________________________
    |  ALTER TABLE table_name DROP COLUMN column_name;    |
    |_____________________________________________________|
   
  * The basic syntax of an ALTER TABLE command to change the "DATA TYPE"
    of a column in table is as follows -  
     ________________________________________________________________
    |  ALTER TABLE table_name MODIFY COLUMN column_name datatype;    |
    |________________________________________________________________|  
    
  * The basic syntax of an ALTER TABLE command to add a "NOT NULL" 
    constraint to a column in a table is as follows.
   __________________________________________________________________
  |  ALTER TABLE table_name MODIFY column_name datatype NOT NULL;    |
  |__________________________________________________________________| 
    
  * The basic syntax of ALTER TABLE to ADD UNIQUE CONSTRAINT to a table 
    as follows -
   ____________________________________________________________________
  |  ALTER TABLE table_name                                            |
  |  ADD CONSTRAINT MyUniqueConstraint UNIQUE(column1, column2...);    |
  |____________________________________________________________________|
 
  * The basic syntax of an "ALTER TABLE" command to "ADD CHECK CONSTRAINT"
    to a table is as follows -
    ___________________________________________________________
   |  ALTER TABLE table_name 
   |  ADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);
   |___________________________________________________________ 
  
  * The basic syntax of an ALTER TABLE command to "ADD PRIMARY KEY" 
    KEY" constraint to a table is as follows.
   _____________________________________________________________________
  |  ALTER TABLE table_name 
  |  ADD CONSTRAINT MyPrimaryKey PRIMARY KEY (column1, column2...); 
  |_____________________________________________________________________
   
   * The basic syntax of an ALTER TABLE command to DROP 
     CONSTRAINT from a table is as follows.
   _____________________________________________ 
  |  ALTER TABLE table_name 
  |  DROP CONSTRAINT MyUniqueConstraint;
  |_____________________________________________
   
   * If you're using MySQL, the code is as follows −
    __________________________________
   |  ALTER TABLE table_name 
   |  DROP PRIMARY KEY;
   |__________________________________ 
     
        Example :
        ''''''''''
    Consider the CUSTOMERS table having the following records −
   
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
  
    * Following is the example to ADD a "New Column" to an existing table -
                                         ''''''''''
      ___________________________________________
     |  ALTER TABLE CUSTOMERS ADD SEX char(1);   |
     |___________________________________________|
  
 * Now, the CUSTOMERS table is changed and following would be the output  
   from the "SELECT" statement -
   
     +----+---------+-----+-----------+----------+------+
     | ID | NAME    | AGE | ADDRESS   | SALARY   | SEX  |
     +----+---------+-----+-----------+----------+------+
     |  1 | Ramesh  |  32 | Ahmedabad |  2000.00 | NULL |
     |  2 | Ramesh  |  25 | Delhi     |  1500.00 | NULL |
     |  3 | kaushik |  23 | Kota      |  2000.00 | NULL | 
     |  4 | kaushik |  25 | Mumbai    |  6500.00 | NULL | 
     |  5 | Hardik  |  27 | Bhopal    |  8500.00 | NULL |
     |  6 | Komal   |  22 | MP        |  4500.00 | NULL |
     |  7 | Muffy   |  24 | Indore    | 10000.00 | NULL |
     +----+---------+-----+-----------+----------+------+
   
    * Following is the example to 'DROP' sex column from the existing
      table -                      ''''
     _____________________________________
    |  ALTER TABLE CUSTOMERS DROP SEX;    |
    |_____________________________________|
   
   * Now, the CUSTOMERS table is changed and following would be output 
     from the 'SELECT' statement -
    
      +----+---------+-----+-----------+----------+
      | ID | NAME    | AGE | ADDRESS   | SALARY   |
      +----+---------+-----+-----------+----------+
      |  1 | Ramesh  |  32 | Ahmedabad |  2000.00 |
      |  2 | Ramesh  |  25 | Delhi     |  1500.00 |
      |  3 | kaushik |  23 | Kota      |  2000.00 |
      |  4 | kaushik |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik  |  27 | Bhopal    |  8500.00 |
      |  6 | Komal   |  22 | MP        |  4500.00 |
      |  7 | Muffy   |  24 | Indore    | 10000.00 |
      +----+---------+-----+-----------+----------+
__________________________________________________
                                                  |
       SQL - Alter Command                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Alter Command
                                                                                        
2) Definition of SQL - Alter Command ?
--------------------------------------
*
 
3) What is SQL - Alter Command About ?
--------------------------------------
*
*

4) What does SQL - Alter Command Do ?
-------------------------------------
*
*

5) Advantages/Benefits of SQL - Alter Command :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Alter Command :
--------------------------------------------------
*
*
*  

7) Examples of SQL - Alter Command :
------------------------------------
*
*
_______________________________________________________________________________

 8. <<<<<<<<< SQL - Truncate Table >>>>>>>>>
    <<<<<<<<< SQL - TRUNCATE TABLE Command >>>>>>>>>
     
   * The SQL TRUNCATE TABLE command is used to delete complete
     data from anexisting table.
   * You can also use "DROP TABLE" command to delete complete table
     but it would remove complete table structure from the database
     and you would need to re-create this table once again if you 
     wish to store some data.
   
       Syntax of Truncate Table -
       ''''''''''''''''''''''''''' 
      * The basic syntax of a TRUNCATE TABLE command is as follows.
      _________________________________
     |  TRUNCATE TABLE  table_name;    |
     |_________________________________| 
  
       Example -
       ''''''''''
    Consider a 'CUSTOMERS' table having the following records −
   
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
       
     Following is the example of a Truncate command :
      ____________________________________
     |  SQL > TRUNCATE TABLE CUSTOMERS;   |
     |____________________________________|
   
   * Now, the CUSTOMERS table is truncated and the output from "SELECT"
     statement will be shown as in the code block below -
      _________________________________________
     |  SQL> SELECT * FROM CUSTOMERS;
     |  Empty set (0.00 sec) 
     |_________________________________________
__________________________________________________
                                                  |
       SQL - Truncate Table                       |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Truncate Table
                                                                                        
2) Definition of SQL - Truncate Table ?
---------------------------------------
*
 
3) What is SQL - Truncate Table About ?
---------------------------------------
*
*

4) What does SQL - Truncate Table Do ?
--------------------------------------
*
*

5) Advantages/Benefits of SQL - Truncate Table :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Truncate Table :
---------------------------------------------------
*
*
*  

7) Examples of SQL - Truncate Table :
-------------------------------------
*
*
_______________________________________________________________________________

 9. <<<<<<<<< SQL - Using Views >>>>>>>>>
  
  ** A "view" is nothing more than a SQL statement that is stored in 
     the database with an associated name.
   * A "view" is actually a composition of a table in the form of a 
     predefined SQL query. 
  
  ** A view can contain all rows of a table or select rows from a table. 
   * A view can be created from one or many tables which depends on the 
     written SQL query to create a view.
   
  ** Views, which are a type of virtual tables allow users to do the 
     following -
       
     (a) Structure data in a way that users or classes of users find 
         natural or intuitive .
     (b) Restrict access to the data in such a way that a user can 
         see and (sometimes) modify exactly what they need and no
         more. 
     (c) Summarize data from various tables which can be used to 
         generate reports.  
        
       *** Creating Views ***
           ==============
    + Database views are created using the "CREATE VIEW" statement.
                                            ===========
    + Views can be created from a single table, multiple tables or 
      another view. 
    + To create a view, a user must have the appropriate system privilege
      according to the specific implementation.
            
        * The basic "CREATE VIEW" syntax is as follows -
    __________________________________________
   |   CREATE VIEW view_name AS
   |   SELECT column1, column2.....
   |   FROM table_name
   |   WHERE [condition];
   |___________________________________________ 
    
    * You can include multiple tables in your SELECT statement in a
      similar way as you use them in a normal SQL SELECT query. 
         
         Example :
         '''''''''' 
      Consider the CUSTOMERS table having the following records −
      
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 | 
      +----+----------+-----+-----------+----------+
      
    * Following is an example to create a view from the CUSTOMERS table.
    * This view would be used to have customer name and age from the 
      "CUSTOMERS" table.
   _____________________________________________
  |  SQL > CREATE VIEW CUSTOMERS_VIEW AS
  |  SELECT name, age
  |  FROM  CUSTOMERS;
  |_____________________________________________ 
  
    * Now, you can query CUSTOMERS_VIEW in a similar way as you
      query an actual table.
    * Following is an example for the same.
    _________________________________________
   |  SQL > SELECT * FROM CUSTOMERS_VIEW;    |
   |_________________________________________| 
 
  This would produce the following result.
   
      +----------+-----+
      | name     | age |
      +----------+-----+
      | Ramesh   |  32 |
      | Khilan   |  25 |
      | kaushik  |  23 |
      | Chaitali |  25 |
      | Hardik   |  27 | 
      | Komal    |  22 |
      | Muffy    |  24 |
      +----------+-----+
   
    *** The WITH CHECK OPTION ***
        =====================
     * The WITH CHECK OPTION is a CREATE VIEW statement option.
     * The purpose of the WITH CHECK OPTION is to ensure that
       all that all UPDATE and INSERTs satisfy the condition(s)
       in the view definition.
      
    ** If they do not satisfy the condition(s), the UPDATE or INSERT
       returns an error. 
    
    ** The following code block has an example of creating same view
       "CUSTOMERS_VIEW" with the "WITH CHECK OPTION".
        ''''''''''''''            '''''''''''''''''
    _______________________________________
   |  CREATE VIEW CUSTOMERS_VIEW AS
   |  SELECT name, age
   |  FROM  CUSTOMERS
   |  WHERE age IS NOT NULL
   |  WITH CHECK OPTION;
   |_______________________________________   
  
   * The WITH CHECK OPTION in this case should deny the entry of
     any "NULL" values in the view's AGE column, because the view is
     defined by data that does not have a "NULL" value in the "AGE"
     column. 
    
        *** Updating a View ***
            ===============
   A view can be updated under certain conditions which are given below -
    
     a) The SELECT clause may not contain the keyword "DISTINCT".
     b) The SELECT clause may not contain summary functions.
     c) The SELECT clause may not contain set functions.
     d) The SELECT clause may not contain set operators.
     e) The SELECT clause may not contain an "ORDER BY" clause.
     f) The "FROM" clause may not contain multiple tables.
     g) The "WHERE" clause may not contain subqueries.
     h) The query may not contain "GROUP BY" or "HAVING".
     i) Calculated columns may not be updated.
     j) "All NOT NULL" columns from the base table must be included
        in the view in order for the "INSERT" query to function. 
 
   * So, if a view satisfies all the above-mentioned rules then you can
     update that view.
   * The following code block has an example to update the age of Ramesh :
   _________________________________________
  |  SQL > UPDATE CUSTOMERS_VIEW
  |     SET AGE = 35
  |     WHERE name = 'Ramesh';
  |_________________________________________
 
  * This would ultimately update the base table CUSTOMERS and the same
    would reflect in the view itself.
  * Now, try to query the base table and the "SELECT" statement would 
    produce the following result :
  
    +----+----------+-----+-----------+----------+
    | ID | NAME     | AGE | ADDRESS   | SALARY   |
    +----+----------+-----+-----------+----------+
    |  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |
    |  2 | Khilan   |  25 | Delhi     |  1500.00 |
    |  3 | kaushik  |  23 | Kota      |  2000.00 |
    |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
    |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
    |  6 | Komal    |  22 | MP        |  4500.00 |
    |  7 | Muffy    |  24 | Indore    | 10000.00 |
    +----+----------+-----+-----------+----------+
 
    *** Inserting Rows into a View ***
        ==========================

 ** Rows of data can be inserted into a view.
  * The same rules that apply to the UPDATE command also apply to 
    the "INSERT" command.
 
 ** Here, we cannot insert rows in the "CUSTOMERS_VIEW" because we have
    not included all the NOT NULL columns in this view, otherwise you 
    can insert rows in a view in a similar way as you insert them in 
    a table.

    *** Deleting Rows into a View ***
        ========================= 
   Rows of data can be deleted from a view. The same rules that apply
   to the "UPDATE" and "INSERT" commands apply to the "DELETE" command.
           ''''''       ''''''                         ''''''   
   * Following is an example to delete a record having AGE = 22.
     ___________________________________________
    |  SQL > DELETE FROM CUSTOMERS_VIEW
    |      WHERE age = 22;
    |___________________________________________
     
    * This would ultimately delete a row from the base table "CUSTOMERS"
      and the same would reflect in the view itself.
    * Now, try to query the base table and the "SELECT" statement would
      produce the following result ;  
   
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     +----+----------+-----+-----------+----------+
          
      *** Dropping Views ***
          ==============
   * Obviously, where you have a view, you need a way to drop the view
     if it is no longer needed.
   * The Syntax is simple below ;
     ______________________________
    |  DROP VIEW view_name;        |
    |______________________________| 
   
    * Following is an example to drop the CUSTOMERS_VIEW from the
      "CUSTOMERS" table.
   _______________________________
  |  DROP VIEW CUSTOMERS_VIEW;    |
  |_______________________________|
__________________________________________________
                                                  |
       SQL - Using Views                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Using Views
                                                                                        
2) Definition of SQL - Using Views ?
------------------------------------
*
 
3) What is SQL - Using Views About ?
------------------------------------
*
*

4) What does SQL - Using Views Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Using Views :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Using Views :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Using Views :
----------------------------------
*
*
_______________________________________________________________________________

 10. <<<<<<<<< SQL - Having Clause >>>>>>>>>
    
   ** The HAVING Clause enables you to specify conditions that filter
      which group results appear in the results. 
   ** The "WHERE" clause places conditions on the selected columns,
      whereas the "HAVING" clause places conditions on groups created
      by the "GROUP BY" clause.
              ````````  
          Syntax of 'Having Clause' -
          '''''''''''''''''''''''''''''
    * The following code block shows the position of the HAVING Clause
      in a query -
    _________________________
   |  SELECT
   |  FROM
   |  WHERE
   |  GROUP BY
   |  HAVING
   |  ORDER BY
   |_________________________
  
   * The "HAVING" clause must follow the "GROUP BY" clause in a query
     and must also precede the "ORDER BY" clause if used.
  *  The following code block has the syntax of the "SELECT" statement
     including the "HAVING" clause −                 ''''''
                    ''''''
    _______________________________________
   |  SELECT column1, column2
   |  FROM table1, table2
   |  WHERE [ conditions ]
   |  GROUP BY column1, column2
   |  HAVING [ conditions ]
   |  ORDER BY column1, column2
   |________________________________________ 
       
       Example -
       '''''''''''  
   Consider the "CUSTOMERS" table having the following records.
                 '''''''''
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
    
  * Following is an example, which would display a record for a similar
    age count that would be more than or equal to 2 -
      _____________________________________________________
     |  SQL > SELECT ID, NAME, AGE, ADDRESS, SALARY
     |      FROM CUSTOMERS
     |      GROUP BY age
     |      HAVING COUNT(age) >= 2;
     |_____________________________________________________ 
   
         * This would produce the following result −
   
     +----+--------+-----+---------+---------+
     | ID | NAME   | AGE | ADDRESS | SALARY  |
     +----+--------+-----+---------+---------+
     |  2 | Khilan |  25 | Delhi   | 1500.00 |
     +----+--------+-----+---------+---------+
__________________________________________________
                                                  |
      SQL - Having Clause                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Having Clause
                                                                                        
2) Definition of SQL - Having Clause ?
--------------------------------------
*
 
3) What is SQL - Having Clause About ?
--------------------------------------
*
*

4) What does SQL - Having Clause Do ?
-------------------------------------
*
*

5) Advantages/Benefits of SQL - Having Clause :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Having Clause :
--------------------------------------------------
*
*
*  

7) Examples of SQL - Having Clause :
------------------------------------
*
*
________________________________________________________________________________
        
 11. <<<<<<<<< SQL - Transactions >>>>>>>>>
    
  ** A transaction is a unit of work that is performed against a database.
   * Transactions are units or sequences of work accomplished in a  
     logical order, whether in a manual fashion by a user or  
     automatically by some sort of a database program.
 
  ** A transaction is the propagation of one or more changes to the
     database. 
   * For example, if you are creating a record or updating a record or
     deleting a record from the table, then you are performing a 
     transaction on that table.
   * It is important to control these transactions to ensure the data
     integrity and to handle database errors.
   
  ** Practically, you will club many SQL queries into a group and you will
     execute all of them together as a part of a transaction.
          
       *** Properties of Transactions ***
           ==========================
 * Transactions have the following four standard properties, usually
   referred to by the acronym "ACID".
      1) Atomicity − 
            * ensures that all operations within the work unit are
              completed successfully.
            * Otherwise, the transaction is aborted at the point of
              failure 

      2) Consistency −
            * ensures that the database properly changes states upon
              a successfully commited transaction. 

      3) Isolation −
            * enables transactions to operate independently of and 
              transparent to each other. 
       
      4) Durability −
            * ensures that the result or effect of a committed 
              transaction persists in case of a system failure.
   
       *** Transaction Control ***
           =================== 
        The following commands are used to control transactions.
             a) COMMIT - to save the changes.

             b) ROLLBACK - to roll back the changes.

             c) SAVEPOINT - creates points within the groups of 
                            transactions in which to ROLLBACK.

             d) SET TRANSACTION -Places a name on a transaction.
           
         +++++ Transactional Control Commands +++++
               ==============================
 ** Transactional control commands are only used with the "DML Commands" 
    such as - INSERT, UPDATE and DELETE only.              ''''''''''''
  * They cannot be used while creating tables or dropping them because
    these operations are automatically commited in the database. 
                  
         +++++ The COMMIT Command +++++
               ==================
   * The COMMIT command is the transactional command used to save changes
     invoked by a transaction to the database. 
   * The COMMIT command saves all the transactions to the database since
     the last COMMIT or ROLLBACK command. 
   
       The syntax for the COMMIT command is as follows.
    ______________
   |  COMMIT;     |
   |______________|
      
       Example -
       '''''''''''
    Consider the CUSTOMERS table having the following records −
  
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     +----+----------+-----+-----------+----------+
  
  * Following is an example which would delete those records from 
    the table which have age = 25 and then COMMIT the changes in 
    the database.
    ____________________________________
   |  SQL> DELETE FROM CUSTOMERS
   |     WHERE AGE = 25;
   |  SQL> COMMIT; 
   |____________________________________
  
   * Thus, two rows from the table would be deleted and the SELECT
     statement would produce the following result.
  
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 | 
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |  
     +----+----------+-----+-----------+----------+
  
         +++++ The ROLLBACK Command +++++
               ====================
   ** The ROLLBACK command is the transactional command used to
      undo transactions that have not already been saved to the 
      database. 
    * This command can only be used to undo transactions since the 
      last COMMIT or ROLLBACK command was issued. 
    
        The syntax for a ROLLBACK command is as follows −
    ______________
   |  ROLLBACK;   |
   |______________|
      
       Example -         
       '''''''''''
     Consider the CUSTOMERS table having the following records −
 
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 | 
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
    
    Following is an example, which would delete those records from the
    table which have the age = 25 and then 'ROLLBACK' the chnages in 
    the database.  
   ___________________________________
  |  SQL> DELETE FROM CUSTOMERS
  |     WHERE AGE = 25;
  |  SQL> ROLLBACK; 
  |___________________________________ 
      
      * Thus, the delete operation would not impact the table and the
        SELECT statement would produce the following result -
    
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   | 
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     +----+----------+-----+-----------+----------+
        
        +++++ The SAVEPOINT Command +++++
              =====================
   * A SAVEPOINT is a point in a transaction when you can roll the 
     transaction back to a certain point without rolling back the
     entire transaction .
   
    * The SYntax for a 'SAVEPOINT' command is as follows -
    _______________________________
   |  SAVEPOINT SAVEPOINT_NAME;    |
   |_______________________________|
 
     + This command serves only in the creation of a SAVEPOINT among
       all the transactional statements.
     + The ROLLBACK command is used to undo a group of transactions.
     
       + The syntax for rolling back to a SAVEPOINT is as follows -
    _________________________________
   |  ROLLBACK TO SAVEPOINT_NAME;    |
   |_________________________________|
   
    * Following is an example where you plan to delete the three different
      records from the 'CUSTOMERS' table.
    * You want to create a 'SAVEPOINT' before each delete, so that you 
      can 'ROLLBACK' to any 'SAVEPOINT' at any time to return the 
      appropriate data to its original state.
      
        Example -
        '''''''''''
    Consider the CUSTOMERS table having the following records.
   
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+ 
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     +----+----------+-----+-----------+----------+
          
    The following code block contains the series of operations.
     ___________________________________________________
    |  SQL> SAVEPOINT SP1;
    |  Savepoint created.
    |  SQL> DELETE FROM CUSTOMERS WHERE ID=1;
    |  1 row deleted.
    |  SQL> SAVEPOINT SP2;
    |  Savepoint created.
    |  SQL> DELETE FROM CUSTOMERS WHERE ID=2;
    |  1 row deleted.
    |  SQL> SAVEPOINT SP3;
    |  Savepoint created.
    |  SQL> DELETE FROM CUSTOMERS WHERE ID=3;
    |  1 row deleted.
    |____________________________________________________
   
    * Now that the three deletions have taken place, let us assume that
      you have changed your mind and decided to 'ROLLBACK' to the 
      'SAVEPOINT' that you identified as 'SP2'.
    * Because SP2 was created after the first deletion, the last two
      deletions are undone -
    _________________________________________
   |  SQL> ROLLBACK TO SP2;
   |  Rollback complete.
   |_________________________________________
  
     * Notice that only the first deletion took place since you rolled 
      back to SP2.
  
    SQL> SELECT * FROM CUSTOMERS;
    +----+----------+-----+-----------+----------+
    | ID | NAME     | AGE | ADDRESS   | SALARY   |
    +----+----------+-----+-----------+----------+
    |  2 | Khilan   |  25 | Delhi     |  1500.00 |
    |  3 | kaushik  |  23 | Kota      |  2000.00 |
    |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
    |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
    |  6 | Komal    |  22 | MP        |  4500.00 |
    |  7 | Muffy    |  24 | Indore    | 10000.00 |
    +----+----------+-----+-----------+----------+
    6 rows selected. 
         
       +++++ The RELEASE SAVEPOINT Command +++++
             =============================
   * The RELEASE SAVEPOINT command is used to remove a 'SAVEPOINT' 
     that you have created.
   
        The Syntax for a "RELEASE SAVEPOINT" commands is as follows -
     ______________________________________
    |  RELEASE SAVEPOINT SAVEPOINT_NAME;   |
    |______________________________________| 
  
    * Once a SAVEPOINT has been released, you can no longer use the
      "ROLLBACK" command to undo transactions performed since the last
      "SAVEPOINT".
        
          +++++ The SET TRANSACTION Command +++++
                ===========================
   * The SET TRANSACTION command can be used to initiate a database 
     transaction.
   * This command is used to specify characteristics for the transaction
     that follows.
   * For example, you can specify a transaction to be read only or read
     write. 
    
        * The syntax for a SET TRANSACTION command is as follows.
     __________________________________________________
    |  SET TRANSACTION [ READ WRITE | READ ONLY ];     |
    |__________________________________________________|
__________________________________________________
                                                  |
       SQL - Transactions                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Transactions
                                                                                        
2) Definition of SQL - Transactions ?
-------------------------------------
*
 
3) What is SQL - Transactions About ?
-------------------------------------
*
*

4) What does SQL - Transactions Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Transactions :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Transactions :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Transactions :
-----------------------------------
*
*
_______________________________________________________________________________

 12. <<<<<<<<< SQL - Wildcards >>>>>>>>>
     <<<<<<<<< SQL - Wildcard Operators >>>>>>>>>
  
    ** We have already discussed about the SQL LIKE operator, which is
       used to compare a value to similar values using the wildcard 
       operators.
     
    ** SQL supports two wildcard operators in conjunction with the "LIKE" 
       operator which are explained in detail in the following table.
     
 ____________________________________________________________________________
|   Sr.No.	|         Wildcard & Description                             |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  " The percent sign (%) "                                  |
|               |                                                            |
|               |    Matches one or more characters.                         |
|               |                                                            |   
|               |    Note −  MS Access uses the asterisk (*) wildcard        |
|               |    character instead of the percent sign (%) wildcard      |
|               |    character.                                              |  
|_______________|____________________________________________________________|
|      2        |  " The underscore (_) "                                    |
|               |                                                            |
|               |    Matches one character.                                  |
|               |                                                            |
|               |    Note − MS Access uses a question mark (?) instead of    |
|               |    the underscore (_) to match any one character.          | 
|_______________|____________________________________________________________|

 ** The percent sign represents zero, one or multiple characters.
  * The underscore represents a single number or a character. 
  * These symbols can be used in combinations.
         
      Syntax -
      '''''''''
      The basic syntax of a '%' and a '_' operator is as follows.
      _______________________________________________
     |  SELECT * FROM table_name
     |  WHERE column LIKE 'XXXX%'
     | 
     |  or 
     |
     |  SELECT * FROM table_name
     |  WHERE column LIKE '%XXXX%' 
     |
     |  or
     |
     |  SELECT * FROM table_name
     |  WHERE column LIKE 'XXXX_'
     |
     |  or
     |
     |  SELECT * FROM table_name
     |  WHERE column LIKE '_XXXX'
     |
     |  or
     |
     |  SELECT * FROM table_name
     |  WHERE column LIKE '_XXXX_'
     |__________________________________________________
  
  * You can combine N number of conditions using the AND or the OR
    operators. 
  *  Here, XXXX could be any numeric or string value.
   
         Example -
         '''''''''''
    * The following table has a number of examples showing the "WHERE"
      part having different "LIKE" clauses with '%' and '_' operators -
 ____________________________________________________________________________
|   Sr.No.	|             TYPE & Description                             |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  WHERE SALARY LIKE '200%'                                  |
|               |                                                            |
|               |  Finds any values that start with 200.                     |
|_______________|____________________________________________________________|
|      2        |  WHERE SALARY LIKE '%200%'                                 |
|               |                                                            |
|               |  Finds any values that have 200 in any position.           |
|_______________|____________________________________________________________|
|      3        |  WHERE SALARY LIKE '_00%'                                  |
|               |                                                            |
|               |  Finds any values that have 00 in the second and third     |
|               |  positions.                                                |                   
|_______________|____________________________________________________________|
|      4        |  WHERE SALARY LIKE '2_%_%'                                 | 
|               |                                                            |
|               |  Finds any values that start with 2 and are at least 3     |
|               |  characters in length.                                     |                  
|_______________|____________________________________________________________|
|      5        |  WHERE SALARY LIKE '%2'                                    |
|               |                                                            |
|               |  Finds any values that end with 2.                         |                   
|_______________|____________________________________________________________|
|      6        |  WHERE SALARY LIKE '_2%3'                                  | 
|               |                                                            |
|               |  Finds any values that have a 2 in the second position     |
|               |  and end with 3.                                           |                   
|_______________|____________________________________________________________|
|      7        |  WHERE SALARY LIKE '_2%3'                                  | 
|               |                                                            |
|               |  Finds any values in a five-digit number that start with 2 |
|               |  and end with 3.                                           |                   
|_______________|____________________________________________________________|
     
    * Let us take a real example, consider the CUSTOMERS table having
      the following records. 

      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
  
   * The following code block is an example, which would display all the
     records from the "CUSTOMERS" table where the "SALARY" starts with '200'.
    ________________________________________
   |  SQL> SELECT * FROM CUSTOMERS
   |  WHERE SALARY LIKE '200%';
   |________________________________________ 
       
        This would produce the following result.
   
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     +----+----------+-----+-----------+----------+

__________________________________________________
   SQL - Wildcards                                |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Wildcards
                                                                                        
2) Definition of SQL - Wildcards ?
----------------------------------
*
 
3) What is SQL - Wildcards About ?
----------------------------------
*
*

4) What does SQL - Wildcards Do ?
---------------------------------
*
*

5) Advantages/Benefits of SQL - Wildcards :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Wildcards :
----------------------------------------------
*
*
*  

7) Examples of SQL - Wildcards :
--------------------------------
*
*
_______________________________________________________________________________

 13. <<<<<<<<< SQL - Date Functions >>>>>>>>>
        
   * The following table has a list of all the important Date and Time
     related functions available through SQL. 
   * There are various other functions supported by your "RDBMS".
   * The given list is based on "MySQL RDBMS".            ''''''
                                 ''''''''''''
 ____________________________________________________________________________
|   Sr.No.	|        Function & Description                              |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  ADDDATE()                                                 |
|               |                                                            |
|               |  Adds dates                                                |
|_______________|____________________________________________________________|
|      2        |  ADDTIME()                                                 |
|               |                                                            |
|               |  Adds time                                                 |
|_______________|____________________________________________________________|
|      3        |  CONVERT_TZ()                                              |
|               |                                                            |
|               |  Converts from one timezone to another                     |                   
|_______________|____________________________________________________________|
|      4        |  CURDATE()                                                 | 
|               |                                                            |
|               |  Returns the current date                                  |                  
|_______________|____________________________________________________________|
|      5        |  CURRENT_DATE(), CURRENT_DATE                              |
|               |                                                            |
|               |  Synonyms for CURDATE()                                    |                   
|_______________|____________________________________________________________|
|      6        |  CURRENT_TIME(), CURRENT_TIME                              | 
|               |                                                            |
|               |  Synonyms for CURTIME()                                    |                    
|_______________|____________________________________________________________|
|      7        |  CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP                    | 
|               |                                                            |
|               |  Synonyms for NOW()                                        |                   
|_______________|____________________________________________________________|
|      8        |  CURTIME()                                                 |
|               |                                                            |
|               |  Returns the current time                                  |
|_______________|____________________________________________________________|
|      9        |  DATE_ADD()                                                |
|               |                                                            |
|               |  Adds two dates                                            |
|_______________|____________________________________________________________|
|     10        |  DATE_FORMAT()                                             |
|               |                                                            |
|               |  Formats date as specified                                 |                   
|_______________|____________________________________________________________|
|     11        |  DATE_SUB()                                                | 
|               |                                                            |
|               |  Subtracts two dates                                       |                  
|_______________|____________________________________________________________|
|     12        |  DATE()                                                    |
|               |                                                            |
|               |  Extracts the date part of a date or datetime expression   |                   
|_______________|____________________________________________________________|
|     13        |  DATEDIFF()                                                | 
|               |                                                            |
|               |                                                            |                    
|_______________|____________________________________________________________|
|     14        |  DAY()                                                     | 
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     15        |  DAYNAME()                                                 |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     16        |  DAYOFMONTH()                                              |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     17        |  DAYOFWEEK()                                               |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     18        |  DAYOFYEAR()                                               | 
|               |                                                            |
|               |                                                            |                  
|_______________|____________________________________________________________|
|     19        |  EXTRACT                                                   |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     20        |  FROM_DAYS()                                               | 
|               |                                                            |
|               |                                                            |                    
|_______________|____________________________________________________________|
|     21        |  FROM_UNIXTIME                                             | 
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     22        |  HOUR()                                                    |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     23        |  LAST_DAY                                                  |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     24        |  LOCALTIME(), LOCALTIME                                    |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     25        |  LOCALTIMESTAMP, LOCALTIMESTAMP()                          | 
|               |                                                            |
|               |                                                            |                  
|_______________|____________________________________________________________|
|     26        |  MAKEDATE()                                                |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     27        |  MAKETIME                                                  | 
|               |                                                            |
|               |                                                            |                    
|_______________|____________________________________________________________|
|     28        |  MICROSECOND                                               | 
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     29        |  MINUTE()                                                  |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     30        |  MONTH()                                                   |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     31        |  MONTHNAME()                                               |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     32        |  NOW()                                                     | 
|               |                                                            |
|               |                                                            |                  
|_______________|____________________________________________________________|
|     33        |  PERIOD_ADD()                                              |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     34        |  PERIOD_DIFF()                                             | 
|               |                                                            |
|               |                                                            |                    
|_______________|____________________________________________________________|
|     35        |  QUARTER()                                                 | 
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     36        |  SEC_TO_TIME()                                             |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     37        |  SECOND()                                                  |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     38        |  STR_TO_DATE()                                             |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     39        |  SUBDATE()                                                 | 
|               |                                                            |
|               |                                                            |                  
|_______________|____________________________________________________________|
|     40        |  SUBTIME()                                                 |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     41        |  SYSDATE()                                                 | 
|               |                                                            |
|               |                                                            |                    
|_______________|____________________________________________________________|
|     42        |  TIME_FORMAT()                                             | 
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     43        |  TIME_TO_SEC()                                             |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     44        |  TIME()                                                    |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     45        |  TIMEDIFF()                                                |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     46        |  TIMESTAMP()                                               | 
|               |                                                            |
|               |                                                            |                  
|_______________|____________________________________________________________|
|     47        |  TIMESTAMPADD()                                            |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     48        |  TIMESTAMPDIFF()                                           | 
|               |                                                            |
|               |                                                            |                    
|_______________|____________________________________________________________|
|     49        |  TO_DAYS()                                                 | 
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     50        |  UNIX_TIMESTAMP()                                          |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     51        |  UTC_DATE()                                                |
|               |                                                            |
|               |                                                            |
|_______________|____________________________________________________________|
|     52        |  UTC_TIME()                                                |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     53        |  UTC_TIMESTAMP()                                           | 
|               |                                                            |
|               |                                                            |                  
|_______________|____________________________________________________________|
|     54        |  WEEK()                                                    |
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     55        |  WEEKDAY()                                                 | 
|               |                                                            |
|               |                                                            |                    
|_______________|____________________________________________________________|
|     56        |  WEEKOFYEAR()                                              | 
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|
|     57        |  YEAR()                                                    | 
|               |                                                            |
|               |                                                            |                    
|_______________|____________________________________________________________|
|     58        |  YEARWEEK()                                                | 
|               |                                                            |
|               |                                                            |                   
|_______________|____________________________________________________________|


 ____________________________________________________________________________
|   Sr.No.	|        Function & Description                              |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  ADDDATE()                                                 |
|               |                                                            |
|               |  Adds dates                                                |
|_______________|____________________________________________________________|
|      2        |  ADDTIME()                                                 |
|               |                                                            |
|               |  Adds time                                                 |
|_______________|____________________________________________________________|
|      3        |  CONVERT_TZ()                                              |
|               |                                                            |
|               |  Converts from one timezone to another                     |                   
|_______________|____________________________________________________________|
|      4        |  CURDATE()                                                 | 
|               |                                                            |
|               |  Returns the current date                                  |                  
|_______________|____________________________________________________________|
|      5        |  CURRENT_DATE(), CURRENT_DATE                              |
|               |                                                            |
|               |  Synonyms for CURDATE()                                    |                   
|_______________|____________________________________________________________|
|      6        |  CURRENT_TIME(), CURRENT_TIME                              | 
|               |                                                            |
|               |  Synonyms for CURTIME()                                    |                    
|_______________|____________________________________________________________|
|      7        |  CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP                    | 
|               |                                                            |
|               |  Synonyms for NOW()                                        |                   
|_______________|____________________________________________________________|
|      8        |  CURTIME()                                                 |
|               |                                                            |
|               |  Returns the current time                                  |
|_______________|____________________________________________________________|
|      9        |  DATE_ADD()                                                |
|               |                                                            |
|               |  Adds two dates                                            |
|_______________|____________________________________________________________|
|     10        |  DATE_FORMAT()                                             |
|               |                                                            |
|               |  Formats date as specified                                 |                   
|_______________|____________________________________________________________|
|     11        |  DATE_SUB()                                                | 
|               |                                                            |
|               |  Subtracts two dates                                       |                  
|_______________|____________________________________________________________|
|     12        |  DATE()                                                    |
|               |                                                            |
|               |  Extracts the date part of a date or datetime expression   |                   
|_______________|____________________________________________________________|
|     13        |  DATEDIFF()                                                | 
|               |                                                            |
|               |  Subtracts two dates                                       |                    
|_______________|____________________________________________________________|
|     14        |  DAY()                                                     | 
|               |                                                            |
|               |  Synonym for DAYOFMONTH()                                  |                   
|_______________|____________________________________________________________|
|     15        |  DAYNAME()                                                 |
|               |                                                            |
|               |  Returns the name of the weekday                           |
|_______________|____________________________________________________________|
|     16        |  DAYOFMONTH()                                              |
|               |                                                            |
|               |  Returns the day of the month (1-31)                       |
|_______________|____________________________________________________________|
|     17        |  DAYOFWEEK()                                               |
|               |                                                            |
|               |  Returns the weekday index of the argument                 |                   
|_______________|____________________________________________________________|
|     18        |  DAYOFYEAR()                                               | 
|               |                                                            |
|               |  Returns the day of the year (1-366)                       |                  
|_______________|____________________________________________________________|
|     19        |  EXTRACT                                                   |
|               |                                                            |
|               |  Extracts part of a date                                   |                   
|_______________|____________________________________________________________|
|     20        |  FROM_DAYS()                                               | 
|               |                                                            |
|               |  Converts a day number to a date                           |                    
|_______________|____________________________________________________________|
|     21        |  FROM_UNIXTIME                                             | 
|               |                                                            |
|               |  Formats date as a UNIX timestamp                          |                   
|_______________|____________________________________________________________|
|     22        |  HOUR()                                                    |
|               |                                                            |
|               |  Extracts the hour                                         |
|_______________|____________________________________________________________|
|     23        |  LAST_DAY                                                  |
|               |                                                            |
|               |  Returns the last day of the month for the argument        |
|_______________|____________________________________________________________|
|     24        |  LOCALTIME(), LOCALTIME                                    |
|               |                                                            |
|               |  Synonym for NOW()                                         |                   
|_______________|____________________________________________________________|
|     25        |  LOCALTIMESTAMP, LOCALTIMESTAMP()                          | 
|               |                                                            |
|               |  Synonym for NOW()                                         |                  
|_______________|____________________________________________________________|
|     26        |  MAKEDATE()                                                |
|               |                                                            |
|               |  Creates a date from the year and day of year              |                   
|_______________|____________________________________________________________|
|     27        |  MAKETIME                                                  | 
|               |                                                            |
|               |  MAKETIME()                                                |                    
|_______________|____________________________________________________________|
|     28        |  MICROSECOND                                               | 
|               |                                                            |
|               |  Returns the microseconds from argument                    |                   
|_______________|____________________________________________________________|
|     29        |  MINUTE()                                                  |
|               |                                                            |
|               |  Returns the minute from the argument                      |
|_______________|____________________________________________________________|
|     30        |  MONTH()                                                   |
|               |                                                            |
|               |  Return the month from the date passed                     |
|_______________|____________________________________________________________|
|     31        |  MONTHNAME()                                               |
|               |                                                            |
|               |  Returns the name of the month                             |                   
|_______________|____________________________________________________________|
|     32        |  NOW()                                                     | 
|               |                                                            |
|               |  Returns the current date and time                         |                  
|_______________|____________________________________________________________|
|     33        |  PERIOD_ADD()                                              |
|               |                                                            |
|               |  Adds a period to a year-month                             |                   
|_______________|____________________________________________________________|
|     34        |  PERIOD_DIFF()                                             | 
|               |                                                            |
|               |  Returns the number of months between periods              |                    
|_______________|____________________________________________________________|
|     35        |  QUARTER()                                                 | 
|               |                                                            |
|               |  Returns the quarter from a date argument                  |                   
|_______________|____________________________________________________________|
|     36        |  SEC_TO_TIME()                                             |
|               |                                                            |
|               |  Converts seconds to 'HH:MM:SS' format                     |
|_______________|____________________________________________________________|
|     37        |  SECOND()                                                  |
|               |                                                            |
|               |  Returns the second (0-59)                                 |
|_______________|____________________________________________________________|
|     38        |  STR_TO_DATE()                                             |
|               |                                                            |
|               |  Converts a string to a date                               |                   
|_______________|____________________________________________________________|
|     39        |  SUBDATE()                                                 | 
|               |                                                            |
|               |  When invoked with three arguments a synonym for DATE_SUB()|                  
|_______________|____________________________________________________________|
|     40        |  SUBTIME()                                                 |
|               |                                                            |
|               |  Subtracts times                                           |                   
|_______________|____________________________________________________________|
|     41        |  SYSDATE()                                                 | 
|               |                                                            |
|               |  Returns the time at which the function executes           |                    
|_______________|____________________________________________________________|
|     42        |  TIME_FORMAT()                                             | 
|               |                                                            |
|               |  Formats as time                                           |                   
|_______________|____________________________________________________________|
|     43        |  TIME_TO_SEC()                                             |
|               |                                                            |
|               |  Returns the argument converted to seconds                 |
|_______________|____________________________________________________________|
|     44        |  TIME()                                                    |
|               |                                                            |
|               |  Extracts the time portion of the expression passed        |
|_______________|____________________________________________________________|
|     45        |  TIMEDIFF()                                                |
|               |                                                            |
|               |  Subtracts time                                            |                   
|_______________|____________________________________________________________|
|     46        |  TIMESTAMP()                                               | 
|               |                                                            |
|               |  With a single argument this function returns the date or  |
|               |  datetime expression.                                      |
|               |  With two arguments, the sum of the arguments              |                  
|_______________|____________________________________________________________|
|     47        |  TIMESTAMPADD()                                            |
|               |                                                            |
|               |  Adds an interval to a datetime expression                 |                   
|_______________|____________________________________________________________|
|     48        |  TIMESTAMPDIFF()                                           | 
|               |                                                            |
|               |  Subtracts an interval from a datetime expression          |                    
|_______________|____________________________________________________________|
|     49        |  TO_DAYS()                                                 | 
|               |                                                            |
|               |  Returns the date argument converted to days               |                   
|_______________|____________________________________________________________|
|     50        |  UNIX_TIMESTAMP()                                          |
|               |                                                            |
|               |  Returns a UNIX timestamp                                  |
|_______________|____________________________________________________________|
|     51        |  UTC_DATE()                                                |
|               |                                                            |
|               |  Returns the current UTC date                              |
|_______________|____________________________________________________________|
|     52        |  UTC_TIME()                                                |
|               |                                                            |
|               |  Returns the current UTC time                              |                   
|_______________|____________________________________________________________|
|     53        |  UTC_TIMESTAMP()                                           | 
|               |                                                            |
|               |  Returns the current UTC date and time                     |                  
|_______________|____________________________________________________________|
|     54        |  WEEK()                                                    |
|               |                                                            |
|               |  Returns the week number                                   |                   
|_______________|____________________________________________________________|
|     55        |  WEEKDAY()                                                 | 
|               |                                                            |
|               |  Returns the weekday index                                 |                    
|_______________|____________________________________________________________|
|     56        |  WEEKOFYEAR()                                              | 
|               |                                                            |
|               |  Returns the calendar week of the date (1-53)              |                   
|_______________|____________________________________________________________|
|     57        |  YEAR()                                                    | 
|               |                                                            |
|               |  Returns the year                                          |                    
|_______________|____________________________________________________________|
|     58        |  YEARWEEK()                                                | 
|               |                                                            |
|               |  Returns the year and week                                 |                   
|_______________|____________________________________________________________|

     **** ADDDATE(date,INTERVAL expr unit), ADDDATE(expr,days) ****
          ====================================================
   
   * When invoked with the INTERVAL form of the second argument,
     ADDDATE() is a synonym for DATE_ADD().
   * The related function SUBDATE() is a synonym for DATE_SUB().
   * For information on the INTERVAL unit argument, see the 
     discussion for DATE_ADD().
_______________________________________________________________________________ 

    mysql> SELECT DATE_ADD('1998-01-02', INTERVAL 31 DAY);
    +---------------------------------------------------------+
    | DATE_ADD('1998-01-02', INTERVAL 31 DAY)                 |
    +---------------------------------------------------------+
    | 1998-02-02                                              |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)


    mysql> SELECT ADDDATE('1998-01-02', INTERVAL 31 DAY);
    +---------------------------------------------------------+
    | ADDDATE('1998-01-02', INTERVAL 31 DAY)                  |
    +---------------------------------------------------------+
    | 1998-02-02                                              | 
    +---------------------------------------------------------+
    1 row in set (0.00 sec)
_______________________________________________________________________________

   * When invoked with the days form of the second argument, MySQL
     treats it as an integer number of days to be added to expr.

     mysql> SELECT ADDDATE('1998-01-02', 31);
     +---------------------------------------------------------+
     | DATE_ADD('1998-01-02', INTERVAL 31 DAY)                 |
     +---------------------------------------------------------+
     | 1998-02-02                                              |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)
     
      *** ADDTIME(expr1,expr2) ***
          ====================
 ** ADDTIME() adds expr2 to expr1 and returns the result. 
  * The expr1 is a time or datetime expression, while the
    expr2 is a time expression. 
____________________________________________________________________________
  
     mysql> SELECT ADDTIME('1997-12-31 23:59:59.999999','1 1:1:1.000002');
     +---------------------------------------------------------+
     | DATE_ADD('1997-12-31 23:59:59.999999','1 1:1:1.000002') |
     +---------------------------------------------------------+
     | 1998-01-02 01:01:01.000001                              |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)
____________________________________________________________________________

      *** CONVERT_TZ(dt,from_tz,to_tz) ***
          ============================
   
____________________________________________________________________________

       mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');
       +---------------------------------------------------------+
       | CONVERT_TZ('2004-01-01 12:00:00','GMT','MET')           |
       +---------------------------------------------------------+
       | 2004-01-01 13:00:00                                     |
       +---------------------------------------------------------+
       1 row in set (0.00 sec)

       mysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');
       +---------------------------------------------------------+
       | CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00')     |
       +---------------------------------------------------------+
       | 2004-01-01 22:00:00                                     |
       +---------------------------------------------------------+
       1 row in set (0.00 sec)
______________________________________________________________________________
      
       *** CURDATE() *** 
           =========
   * Returns the current date as a value in 'YYYY-MM-DD' or
     YYYYMMDD format, depending on whether the function is used  
     in a string or in a numeric context.
____________________________________________________________________
      
        mysql> SELECT CURDATE();
        +---------------------------------------------------------+
        | CURDATE()                                               |
        +---------------------------------------------------------+
        | 1997-12-15                                              |
        +---------------------------------------------------------+
        1 row in set (0.00 sec)


        mysql> SELECT CURDATE() + 0;
        +---------------------------------------------------------+
        | CURDATE() + 0                                           |
        +---------------------------------------------------------+
        | 19971215                                                |
        +---------------------------------------------------------+
        1 row in set (0.00 sec)

          *** CURRENT_DATE and CURRENT_DATE() ***
     CURRENT_DATE and CURRENT_DATE() are synonyms for CURDATE()

               *** CURTIME() ***
                   =========
  * Returns the current time as a value in 'HH:MM:SS' or HHMMSS
    format, depending on whether the function is used in a string 
    or in a numeric context. 
  *  The value is expressed in the current time zone.

_____________________________________________________________________________

      mysql> SELECT CURTIME();
      +---------------------------------------------------------+
      | CURTIME()                                               |
      +---------------------------------------------------------+
      | 23:50:26                                                |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)


      mysql> SELECT CURTIME() + 0;
      +---------------------------------------------------------+
      | CURTIME() + 0                                           |
      +---------------------------------------------------------+ 
      | 235026                                                  |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)
_______________________________________________________________________________
          
      *** CURRENT_TIME and CURRENT_TIME() ***
          ===============================
     CURRENT_TIME and CURRENT_TIME() are synonyms for CURTIME().

      *** CURRENT_TIMESTAMP and CURRENT_TIMESTAMP() ***
          =========================================
   CURRENT_TIMESTAMP and CURRENT_TIMESTAMP() are synonyms for NOW().
          
      *** DATE(expr) ***
          ==========
   * Extracts the date part of the date or datetime expression expr.
____________________________________________________________________________
    
      mysql> SELECT DATE('2003-12-31 01:02:03');
      +---------------------------------------------------------+
      | DATE('2003-12-31 01:02:03')                             |
      +---------------------------------------------------------+
      |  2003-12-31                                             |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)
____________________________________________________________________________

       *** DATEDIFF(expr1,expr2) ***
           =====================
  ** DATEDIFF() returns expr1 . expr2 expressed as a value in days from
     one date to the other.
   * Both expr1 and expr2 are date or date-and-time expressions.
   *  Only the date parts of the values are used in the calculation.
______________________________________________________________________________
  
      mysql> SELECT DATEDIFF('1997-12-31 23:59:59','1997-12-30');
      +---------------------------------------------------------+
      | DATEDIFF('1997-12-31 23:59:59','1997-12-30')            |
      +---------------------------------------------------------+
      | 1                                                       |
      +---------------------------------------------------------+ 
      1 row in set (0.00 sec)
______________________________________________________________________________
     
 *** DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit) ***
     ====================================================================
    ** These functions perform date arithmetic.
     * The date is a 'DATETIME' or 'DATE' value specifying the starting date.
     * The "expr" is an expression specifying the interval value to be added
     * or subtracted from the starting date.
     * The expr is a string; it may start with a '-' for negative intervals.
    
  ** A "unit" is a keyword indicating the units in which the expression
     should be interpreted. 
  
  ** The "INTERVAL" keyword and the unit specifier are not case sensitive.

    ** The following table shows the expected form of the expr argument
       for each unit value.
   ____________________________________________________________________
  |     unit Value	     |        Expected exprFormat
  |``````````````````````````|`````````````````````````````````````````
  |__________________________|_________________________________________
  |    MICROSECOND	     |     MICROSECONDS
  |__________________________|_________________________________________
  |    SECOND	             |     SECONDS
  |__________________________|_________________________________________
  |    MINUTE	             |     MINUTES
  |__________________________|_________________________________________
  |    HOUR                  |     HOURS
  |__________________________|_________________________________________
  |    DAY                   |     DAYS
  |__________________________|_________________________________________
  |    WEEK                  |     WEEKS
  |__________________________|_________________________________________
  |    MONTH                 |     MONTHS
  |__________________________|_________________________________________
  |    QUARTER               |     QUARTERS
  |__________________________|_________________________________________ 
  |    YEAR                  |     YEARS
  |__________________________|_________________________________________
  |    SECOND_MICROSECOND    |    'SECONDS.MICROSECONDS'
  |__________________________|_________________________________________ 
  |    MINUTE_MICROSECOND    |    'MINUTES.MICROSECONDS'
  |__________________________|_________________________________________ 
  |    MINUTE_SECOND	     |    'MINUTES:SECONDS'
  |__________________________|_________________________________________
  |    HOUR_MICROSECOND	     |    'HOURS.MICROSECONDS'
  |__________________________|_________________________________________
  |    HOUR_SECOND           |    'HOURS:MINUTES:SECONDS'
  |__________________________|_________________________________________
  |    HOUR_MINUTE	     |    'HOURS:MINUTES'
  |__________________________|_________________________________________
  |    DAY_MICROSECOND	     |    'DAYS.MICROSECONDS'
  |__________________________|_________________________________________
  |    DAY_SECOND            | 	  'DAYS HOURS:MINUTES:SECONDS'
  |__________________________|_________________________________________
  |    DAY_MINUTE	     |    'DAYS HOURS:MINUTES'
  |__________________________|_________________________________________
  |    DAY_HOUR	             |    'DAYS HOURS'
  |__________________________|_________________________________________
  |   YEAR_MONTH	     |    'YEARS-MONTHS'
  |__________________________|_________________________________________

    * The values QUARTER and WEEK are available from the MySQL
      5.0.0. version.
   
    mysql> SELECT DATE_ADD('1997-12-31 23:59:59', 
       -> INTERVAL '1:1' MINUTE_SECOND);
    +---------------------------------------------------------+
    | DATE_ADD('1997-12-31 23:59:59', INTERVAL...             | 
    +---------------------------------------------------------+
    | 1998-01-01 00:01:00                                     |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)


   mysql> SELECT DATE_ADD('1999-01-01', INTERVAL 1 HOUR);
   +---------------------------------------------------------+
   | DATE_ADD('1999-01-01', INTERVAL 1 HOUR)                 |
   +---------------------------------------------------------+
   | 1999-01-01 01:00:00                                     |
   +---------------------------------------------------------+ 
   1 row in set (0.00 sec)
            
       **** DATE_FORMAT(date,format) ****
            ========================
   ** This command formats the date value as per the format string.
   
   ** The following specifiers may be used in the format string.
    * The '%' character is required before the format specifier characters.

 ____________________________________________________________________________
|   Sr.No.	|        Function & Description                              |
|```````````````|````````````````````````````````````````````````````````````|
|_______________|____________________________________________________________|
|      1        |  %a                                                        |
|               | ''''                                                       |
|               |  Abbreviated weekday name (Sun..Sat)                       |
|_______________|____________________________________________________________|
|      2        |  %b                                                        |
|               | ''''                                                       |
|               |  Abbreviated month name (Jan..Dec)                         |
|_______________|____________________________________________________________|
|      3        |  %c                                                        |
|               | ''''                                                       |
|               |  Month, numeric (0..12)                                    |                   
|_______________|____________________________________________________________|
|      4        |  %D                                                        | 
|               | ''''                                                       |
|               |  Day of the month with English suffix (0th, 1st, 2nd,      |
|               |  3rd,.)                                                    |                   
|_______________|____________________________________________________________|
|      5        |  %d                                                        |
|               | ''''                                                       |
|               |  Day of the month, numeric (00..31)                        |                   
|_______________|____________________________________________________________|
|      6        |  %e                                                        | 
|               |                                                            |
|               |  Day of the month, numeric (0..31)                         |                    
|_______________|____________________________________________________________|
|      7        |  %f                                                        | 
|               | ''''                                                       |
|               |  Microseconds (000000..999999)                             |                   
|_______________|____________________________________________________________|
|      8        |  %H                                                        |
|               | ''''                                                       |
|               |  Hour (00..23)                                             |
|_______________|____________________________________________________________|
|      9        |  %h                                                        |
|               | ''''                                                       |
|               |  Hour (01..12)                                             |
|_______________|____________________________________________________________|
|     10        |  %I                                                        |
|               | ''''                                                       |
|               |  Hour (01..12)                                             |                   
|_______________|____________________________________________________________|
|     11        |  i%                                                        | 
|               | ''''                                                       |
|               |  Minutes, numeric (00..59)                                 |                  
|_______________|____________________________________________________________|
|     12        |  %j                                                        |
|               | ''''                                                       |
|               |  Day of year (001..366)                                    |                   
|_______________|____________________________________________________________|
|     13        |  %k                                                        | 
|               | ''''                                                       |
|               |  Hour (0..23)                                              |                    
|_______________|____________________________________________________________|
|     14        |  %l                                                        | 
|               | ''''                                                       |
|               |  Hour (1..12)                                              |                   
|_______________|____________________________________________________________|
|     15        |  %M                                                        |
|               | ''''                                                       |
|               |  Month name (January..December)                            |
|_______________|____________________________________________________________|
|     16        |  %m                                                        |
|               | ''''                                                       |
|               |  Month, numeric (00..12)                                   |
|_______________|____________________________________________________________|
|     17        |  %p                                                        |
|               | '''''                                                      |
|               |  AM or PM                                                  |                   
|_______________|____________________________________________________________|
|     18        |  %r                                                        | 
|               | ''''                                                       |
|               |  Time, 12-hour (hh:mm:ss followed by AM or PM)             |                  
|_______________|____________________________________________________________|
|     19        |  %S                                                        |
|               | ''''                                                       |
|               |  Seconds (00..59)                                          |                   
|_______________|____________________________________________________________|
|     20        |  %s                                                        | 
|               | ''''                                                       |
|               |  Seconds (00..59)                                          |                    
|_______________|____________________________________________________________|
|     21        |  %T                                                        | 
|               | ''''                                                       |
|               |  Time, 24-hour (hh:mm:ss)                                  |                   
|_______________|____________________________________________________________|
|     22        |  %U                                                        |
|               | ''''                                                       |
|               |  Week (00..53), where Sunday is the first day of the week  |
|_______________|____________________________________________________________|
|     23        |  %u                                                        |
|               | ''''                                                       |
|               |  Week (00..53), where Monday is the first day of the week  |
|_______________|____________________________________________________________|
|     24        |  %V                                                        |
|               | ''''                                                       |
|               |  Week (01..53), where Sunday is the first day of the week  |
|               |  used with %X                                              |                    
|_______________|____________________________________________________________|
|     25        |  %v                                                        | 
|               | ''''                                                       |
|               |  Week (01..53), where Monday is the first day of the week  |
|               |  ; used with %x                                            |                  
|_______________|____________________________________________________________|
|     26        |  %W                                                        |
|               | ''''                                                       |
|               |  Weekday name (Sunday..Saturday)                           |                   
|_______________|____________________________________________________________|
|     27        |  %w                                                        | 
|               | ''''                                                       |
|               |  Day of the week (0=Sunday..6=Saturday)                    |                    
|_______________|____________________________________________________________|
|     28        |  %X                                                        | 
|               | '''''                                                      |
|               |  Year for the week where Sunday is the first day of the    |
|               |  week, numeric, four digits; used with %V                  |                   
|_______________|____________________________________________________________|
|     29        |  %x                                                        |
|               | ''''                                                       |
|               |  Year for the week, where Monday is the first day of the   |
|               |  week, numeric, four digits; used with %v                  |
|_______________|____________________________________________________________|
|     30        |  %Y                                                        |
|               | ''''                                                       |
|               |  Year, numeric, four digits                                |
|_______________|____________________________________________________________|
|     31        |  %y                                                        |
|               | ''''                                                       |
|               |  Year, numeric (two digits)                                |                   
|_______________|____________________________________________________________|
|     32        |  %%                                                        | 
|               | '''''                                                      |
|               |  A literal .%. character                                   |                  
|_______________|____________________________________________________________|
|     33        |  %x                                                        |
|               | '''''                                                      |
|               |  x, for any.x. not listed above                            |                   
|_______________|____________________________________________________________|


       mysql> SELECT DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y');
       +---------------------------------------------------------+
       | DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y')          |
       +---------------------------------------------------------+
       | Saturday October 1997                                   |
       +---------------------------------------------------------+
       1 row in set (0.00 sec)


      mysql> SELECT DATE_FORMAT('1997-10-04 22:23:00'
         -> '%H %k %I %r %T %S %w');
      +---------------------------------------------------------+
      | DATE_FORMAT('1997-10-04 22:23:00.......                 |
      +---------------------------------------------------------+
      |  22 22 10 10:23:00 PM 22:23:00 00 6                     |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)

    **** DATE_SUB(date,INTERVAL expr unit) ****
         =================================
     * This is similar to the DATE_ADD() function.

  **** DAY(date) ****
       =========
     * The DAY() is a synonym for the DAYOFMONTH() function.

    *** DAYNAME(date) ***
        =============
     * Returns the name of the weekday for date.
      
         mysql> SELECT DAYNAME('1998-02-05');
         +---------------------------------------------------------+
         | DAYNAME('1998-02-05')                                   |
         +---------------------------------------------------------+
         | Thursday                                                |
         +---------------------------------------------------------+
         1 row in set (0.00 sec)

    
      *** DAYOFMONTH(date) ***
          ================
     
   *** DAYOFWEEK(date) ***
       ===============
* Returns the weekday index for date (1 = Sunday, 2 = Monday, ., 7 = Saturday).
* These index values correspond to the ODBC standard.

      mysql> SELECT DAYOFWEEK('1998-02-03');
      +---------------------------------------------------------+
      |DAYOFWEEK('1998-02-03')                                  | 
      +---------------------------------------------------------+
      | 3                                                       |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)

    *** DAYOFYEAR(date) ***
        ===============
  * Returns the day of the year for date, in the range 1 to 366.

     mysql> SELECT DAYOFYEAR('1998-02-03');
     +---------------------------------------------------------+
     | DAYOFYEAR('1998-02-03')                                 |
     +---------------------------------------------------------+
     | 34                                                      |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)


    *** EXTRACT(unit FROM date) ***
        =======================
  * The "EXTRACT()" function uses the same kinds of unit specifiers as 
    "DATE_ADD()" or "DATE_SUB()", but extracts parts from the date rather
    performing date aithmetic.   
   
      mysql> SELECT EXTRACT(YEAR FROM '1999-07-02');
      +---------------------------------------------------------+
      | EXTRACT(YEAR FROM '1999-07-02')                         |
      +---------------------------------------------------------+
      | 1999                                                    |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)

      mysql> SELECT EXTRACT(YEAR_MONTH FROM '1999-07-02 01:02:03');
      +---------------------------------------------------------+
      | EXTRACT(YEAR_MONTH FROM '1999-07-02 01:02:03')          |
      +---------------------------------------------------------+
      | 199907                                                  |
      +---------------------------------------------------------+ 
      1 row in set (0.00 sec)


   *** FROM_DAYS(N) ***
       ============
    * Given a day number N, returns a DATE value.
  
     mysql> SELECT FROM_DAYS(729669);
     +---------------------------------------------------------+
     | FROM_DAYS(729669)                                       |
     +---------------------------------------------------------+
     | 1997-10-07                                              |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)
    
   * "Note" − Use FROM_DAYS() with caution on old dates.
   * It is not intended for use with values that precede the advent of 
     the Gregorian calender (1582).

     *** FROM_UNIXTIME(unix_timestamp) ***
         =============================


     *** FROM_UNIXTIME(unix_timestamp,format) ***
         ====================================
  ** Returns a representation of the unix_timestamp argument as a value
     in 'YYYY-MM-DD HH:MM:SS or YYYYMMDDHHMMSS format, depending on 
     whether the function is used in a string or in a numeric context. 
   *  The value is expressed in the current time zone.
   *  The unix_timestamp argument is an internal timestamp values,
      which are produced by the "UNIX_TIMESTAMP()" function.
                                 ''''''''''''''''
  ** If the format is given, the result is formatted according to the format
     string, which is used in the same way as is listed in the entry for the 
     "DATE_FORMAT()" function.
      '''''''''''''


     *** HOUR(time) ***
         ========== 
   * Returns the hour for time.
   * The range of the return value is 0 to 23 for time-of-day values.
   * However, the range of TIME values actually is much larger,
     so HOUR can return values greater than 23.
    
      mysql> SELECT HOUR('10:05:03');
      +---------------------------------------------------------+
      | HOUR('10:05:03')                                        |
      +---------------------------------------------------------+
      | 10                                                      |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)

    *** LAST_DAY(date) ***
        ==============
     
    mysql> SELECT LAST_DAY('2003-02-05');
    +---------------------------------------------------------+
    | LAST_DAY('2003-02-05')                                  |
    +---------------------------------------------------------+
    | 2003-02-28                                              |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)


     *** LOCALTIME and LOCALTIME() ***
         =========================
       * LOCALTIME and LOCALTIME() are synonyms for NOW().

     
     *** LOCALTIMESTAMP and LOCALTIMESTAMP() ***
         ===================================
   * LOCALTIMESTAMP and LOCALTIMESTAMP() are synonyms for NOW().

   
     *** MAKEDATE(year,dayofyear) ***
         ========================
   * Returns a date, given year and day-of-year values.
   * The dayofyear value must be greater than 0 or the result will be NULL.
   
    mysql> SELECT MAKEDATE(2001,31), MAKEDATE(2001,32);
    +---------------------------------------------------------+
    | MAKEDATE(2001,31), MAKEDATE(2001,32)                    |
    +---------------------------------------------------------+
    | '2001-01-31', '2001-02-01'                              |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)

   *** MAKETIME(hour,minute,second) ***
       ============================
  * Returns a time value calculated from the hour, minute and second
    argument. 
   
     mysql> SELECT MAKETIME(12,15,30);
     +---------------------------------------------------------+
     | MAKETIME(12,15,30)                                      |
     +---------------------------------------------------------+
     | '12:15:30'                                              |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)

   *** MICROSECOND(expr) ***
       =================
  * Returns the microseconds from the time or datetime expression (expr)
    as a number in the range from 0 to 999999.
  
    mysql> SELECT MICROSECOND('12:00:00.123456');
    +---------------------------------------------------------+
    | MICROSECOND('12:00:00.123456')                          |
    +---------------------------------------------------------+
    | 123456                                                  |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)

    
    *** MINUTE(time) ***
        ============
   * Returns the minute for time, in the range 0 to 59. 

    mysql> SELECT MINUTE('98-02-03 10:05:03');
    +---------------------------------------------------------+
    | MINUTE('98-02-03 10:05:03')                             |
    +---------------------------------------------------------+
    | 5                                                       |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)

     
   *** MONTH(date) ***
       ===========
   * Returns the month for date, in the range 0 to 12.
  
    mysql> SELECT MONTH('1998-02-03')
    +---------------------------------------------------------+
    | MONTH('1998-02-03')                                     |
    +---------------------------------------------------------+
    | 2                                                       |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)
  
    *** MONTHNAME(date) *** 
        ===============
   * Returns the full name of the month for a date.
  
    mysql> SELECT MONTHNAME('1998-02-05');
    +---------------------------------------------------------+
    | MONTHNAME('1998-02-05')                                 |
    +---------------------------------------------------------+
    | February                                                |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)



    *** NOW() ***
        =====
  * Returns the current date and time as a value in 'YYYY-MM-DDHH:MM:SS'
    or YYYYMMDDHHMMSS format, depending on whether the function is used in
    a string or numeric context.
  * This value is expressed in the current time zone.
  
    mysql> SELECT NOW();
    +---------------------------------------------------------+
    | NOW()                                                   |
    +---------------------------------------------------------+
    | 1997-12-15 23:50:26                                     |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)

   

     *** PERIOD_ADD(P,N) ***
         ===============
  * Adds N months to a period P (in the format YYMM or YYYYMM).
  * Returns a value in the format YYYYMM.
  * Note that the period argument P is not a date value.

    mysql> SELECT PERIOD_ADD(9801,2);
    +---------------------------------------------------------+
    | PERIOD_ADD(9801,2)                                      |
    +---------------------------------------------------------+
    | 199803                                                  |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)



     *** PERIOD_DIFF(P1,P2) ***
         ==================
   * Returns the number of months between periods P1 and P2.
   * These periods P1 and P2 should be in the format YYMM or YYYYMM.
   * Note that the period arguments P1 and P2 are not date values.
  
     mysql> SELECT PERIOD_DIFF(9802,199703);
     +---------------------------------------------------------+
     | PERIOD_DIFF(9802,199703)                                |
     +---------------------------------------------------------+
     | 11                                                      |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)


    *** QUARTER(date) ***
        =============
   * Returns the quarter of the year for date, in the range 1 to 4.

    mysql> SELECT QUARTER('98-04-01');
    +---------------------------------------------------------+
    | QUARTER('98-04-01')                                     |
    +---------------------------------------------------------+
    | 2                                                       |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)

 
     *** SECOND(time) ***
         ============
   * Returns the second for time, in the range 0 to 59.
    
    mysql> SELECT SECOND('10:05:03');
    +---------------------------------------------------------+
    | SECOND('10:05:03')                                      |
    +---------------------------------------------------------+
    | 3                                                       |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)


   *** SEC_TO_TIME(seconds) ***
       ====================
   * Returns the seconds argument, converted to hours, minutes and
     seconds, as a value in  'HH:MM:SS' or HHMMSS format, depending
     on whether the function is used in a string or numeric context.
  
     mysql> SELECT SEC_TO_TIME(2378);
     +---------------------------------------------------------+
     | SEC_TO_TIME(2378)                                       |
     +---------------------------------------------------------+
     | 00:39:38                                                |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)


    *** STR_TO_DATE(str,format) ***
        =======================
  * This is the inverse of the DATE_FORMAT() function.
  * It takes a string str and a format string format.
  * The STR_TO_DATE() function returns a DATETIME value if the format
    string contains both date and time parts.
  * Else, it returns a DATE or TIME value if the string contains only
    date or time parts. 
  
     mysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');
     +---------------------------------------------------------+
     | STR_TO_DATE('04/31/2004', '%m/%d/%Y')                   |
     +---------------------------------------------------------+
     | 2004-04-31                                              |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)
    
    
    *** SUBDATE(date,INTERVAL expr unit) and SUBDATE(expr,days) ***
        ======================================================= 
   * When invoked with the INTERVAL form of the second argument,
     SUBDATE() is a synonym for DATE_SUB().
   * For information on the INTERVAL unit argument, see the discussion
     for DATE_ADD().

     mysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);
     +---------------------------------------------------------+
     | DATE_SUB('1998-01-02', INTERVAL 31 DAY)                 |
     +---------------------------------------------------------+
     | 1997-12-02                                              | 
     +---------------------------------------------------------+ 
     1 row in set (0.00 sec)


     mysql> SELECT SUBDATE('1998-01-02', INTERVAL 31 DAY);
     +---------------------------------------------------------+
     | SUBDATE('1998-01-02', INTERVAL 31 DAY)                  |
     +---------------------------------------------------------+
     | 1997-12-02                                              |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)

  
     *** SUBTIME(expr1,expr2) ***
         ====================
   * The SUBTIME() function returns expr1 . 
   * expr2 expressed as a value in the same format as expr1.
   * The expr1 value is a time or a datetime expression, while the
     expr2 value is a time expression.
   
      mysql> SELECT SUBTIME('1997-12-31 23:59:59.999999',
         -> '1 1:1:1.000002');
      +---------------------------------------------------------+
      | SUBTIME('1997-12-31 23:59:59.999999'...                 |
      +---------------------------------------------------------+
      | 1997-12-30 22:58:58.999997                              |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)


          *** SYSDATE() ***
              =========
  * Returns the current date and time as a value in 'YYYY-MM-DDHH:MM:SS'
    or YYYYMMDDHHMMSS format, depending on whether the function
    is used in a string or in a numeric context.

     mysql> SELECT SYSDATE();
     +---------------------------------------------------------+
     | SYSDATE()                                               |
     +---------------------------------------------------------+
     | 2006-04-12 13:47:44                                     |
     +---------------------------------------------------------+
     1 row in set (0.00 sec) 

       
       *** TIME(expr) ***
           ==========
  * Extracts the time part of the time or datetime expression "expr"
    and returns it as a string.

     mysql> SELECT TIME('2003-12-31 01:02:03');
     +---------------------------------------------------------+
     | TIME('2003-12-31 01:02:03')                             |
     +---------------------------------------------------------+
     | 01:02:03                                                |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)

   
      *** TIMEDIFF(expr1,expr2) ***
          =====================
  * The TIMEDIFF() function returns expr1 . expr2 expressed as a time
    value.
  * These 'expr1 and expr2' values are time or date-and-time expressions, 
    but both must be of the same type.
   
 
      mysql> SELECT TIMEDIFF('1997-12-31 23:59:59.000001',
         -> '1997-12-30 01:01:01.000002');
         +---------------------------------------------------------+
         | TIMEDIFF('1997-12-31 23:59:59.000001'.....              |
         +---------------------------------------------------------+
         |  46:58:57.999999                                        |
         +---------------------------------------------------------+
         1 row in set (0.00 sec)

      
       *** TIMESTAMP(expr), TIMESTAMP(expr1,expr2) ***
           =======================================
   * With a single argument, this function returns the date or datetime
     expression expr as a datetime value.
   * With two arguments, it adds the time expression expr2 to the date
     or datetime expression expr1 and returns the result as a
     datetime value. 
  
    mysql> SELECT TIMESTAMP('2003-12-31');
    +---------------------------------------------------------+
    | TIMESTAMP('2003-12-31')                                 |
    +---------------------------------------------------------+
    | 2003-12-31 00:00:00                                     |
    +---------------------------------------------------------+
    1 row in set (0.00 sec)

  
    *** TIMESTAMPADD(unit,interval,datetime_expr) ***
        =========================================
   * This function adds the integer expression interval to the date or
     datetime expression "datetime_expr".
   * The unit for interval is given by the unit argument, which should
     be one of the following values −
        
       a) FRAC_SECOND
       b) SECOND, MINUTE
       c) HOUR, DAY
       d) WEEK
       e) MONTH
       f) QUARTER or
       g) YEAR

  * The unit value may be specified using one of the keywords as
    shown or with a prefix of SQL_TSI_.

  * For example, DAY and SQL_TSI_DAY both are legal.
   
     mysql> SELECT TIMESTAMPADD(MINUTE,1,'2003-01-02');
     +---------------------------------------------------------+
     | TIMESTAMPADD(MINUTE,1,'2003-01-02')                     |
     +---------------------------------------------------------+
     | 2003-01-02 00:01:00                                     |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)


      *** TIMESTAMPDIFF(unit,datetime_expr1,datetime_ex ***
          =============================================
   * Returns the integer difference between the date or datetime
     expressions datetime_expr1 and datetime_expr2.
   * The unit for the result is given by the unit argument.
   * The legal values for the unit are the same as those listed in the
     description of the TIMESTAMPADD() function.

     mysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');
     +---------------------------------------------------------+
     | TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01')          |
     +---------------------------------------------------------+
     | 3                                                       |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)


       *** TIME_FORMAT(time,format) ***
           =========================
    * This function is used like the DATE_FORMAT() function, but the
      format string may contain format specifiers only for hours, minutes
      and seconds.
      
    * If the time value contains an hour part that is greater than 23, the
      "%H and %k" hour format specifiers produce a value larger than the
      usual range of 0 to 23. 
    * The other hour format specifiers produce the hour value modulo 12.
   
      mysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');
      +---------------------------------------------------------+
      | TIME_FORMAT('100:00:00', '%H %k %h %I %l')              |
      +---------------------------------------------------------+
      | 100 100 04 04 4                                         |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)


        *** TIME_TO_SEC(time) ***
            =================
     * Returns the time argument converted to seconds.
   
      mysql> SELECT TIME_TO_SEC('22:23:00');
      +---------------------------------------------------------+
      | TIME_TO_SEC('22:23:00')                                 |
      +---------------------------------------------------------+
      | 80580                                                   |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)


     *** TO_DAYS(date) ***
         =============
   * Given a date, returns a day number (the number of days since year 0).

     mysql> SELECT TO_DAYS(950501);
     +---------------------------------------------------------+
     | TO_DAYS(950501)                                         |
     +---------------------------------------------------------+
     | 728779                                                  |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)



      *** UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date) ***
          ======================================
   ** If called with no argument, this function returns a Unix timestamp
      (seconds since '1970-01-01 00:00:00' UTC) as an unsigned integer.
    * If UNIX_TIMESTAMP() is called with a date argument,  
      it returns the value of the argument as seconds since
      '1970-01-01 00:00:00' UTC. date may be a DATE string, 
      a DATETIME string, a TIMESTAMP, or a number in the format  
      YYMMDD or YYYYMMDD.
    
       mysql> SELECT UNIX_TIMESTAMP();
       +---------------------------------------------------------+
       | UNIX_TIMESTAMP()                                        |
       +---------------------------------------------------------+
       | 882226357                                               |
       +---------------------------------------------------------+
       1 row in set (0.00 sec)


       mysql> SELECT UNIX_TIMESTAMP('1997-10-04 22:23:00');
       +---------------------------------------------------------+
       | UNIX_TIMESTAMP('1997-10-04 22:23:00')                   |
       +---------------------------------------------------------+
       | 875996580                                               |
       +---------------------------------------------------------+
       1 row in set (0.00 sec)

   
     *** UTC_DATE, UTC_DATE() ***
         ====================
   ** Returns the current UTC date as a value in 'YYYY-MM-DD' or
      YYYYMMDD format, depending on whether the function is used
      in a string or numeric context.
  
      mysql> SELECT UTC_DATE(), UTC_DATE() + 0;
      +---------------------------------------------------------+
      | UTC_DATE(), UTC_DATE() + 0                              |
      +---------------------------------------------------------+
      | 2003-08-14, 20030814                                    |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)


      *** UTC_TIME, UTC_TIME() ***
          ====================
    ** Returns the current UTC time as a value in 'HH:MM:SS' or
       HHMMSS format, depending on whether the function is used in
       a string or numeric context. 
  
      mysql> SELECT UTC_TIME(), UTC_TIME() + 0;
      +---------------------------------------------------------+
      | UTC_TIME(), UTC_TIME() + 0                              |
      +---------------------------------------------------------+
      | 18:07:53, 180753                                        |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)



    *** UTC_TIMESTAMP, UTC_TIMESTAMP() *** 
        ==============================
       * Returns the current UTC date and time as a value in 
         'YYYY-MM-DD HH:MM:SS' or in a YYYYMMDDHHMMSS format, depending
         on whether the function is used in a string or in a numeric
         context.
  
       mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;
       +---------------------------------------------------------+
       | UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0                    |
       +---------------------------------------------------------+
       | 2003-08-14 18:08:04, 20030814180804                     |
       +---------------------------------------------------------+
       1 row in set (0.00 sec)


      *** WEEK(date[,mode]) ***
          =================
   * This function returns the week number for date. 
   * The two-argument form of WEEK() allows you to specify whether 
     the week starts on a Sunday or a Monday and whether the return value
     should be in the range from 0 to 53 or from 1 to 53.
   * If the mode argument is omitted, the value of the default_week_format 
     system variable is used.
   __________________________________________________________________________
  | Mode  | First Day of week | Range  |   Week 1 is the first week.         |
  |```````|```````````````````|````````|`````````````````````````````````````|
  |_______|___________________|________|_____________________________________|
  |  0	  |   Sunday	      | 0-53   | with a Sunday in this year          |
  |_______|___________________|________|_____________________________________|
  |  1	  |   Monday	      | 0-53   | with more than 3 days this year     |
  |_______|___________________|________|_____________________________________|
  |  2	  |   Sunday	      | 1-53   | with a Sunday in this year          | 
  |_______|___________________|________|_____________________________________|
  |  3	  |   Monday	      | 1-53   | with more than 3 days this year     |  
  |_______|___________________|________|_____________________________________|
  |  4	  |   Sunday	      | 0-53   | with more than 3 days this year     |
  |_______|___________________|________|_____________________________________|
  |  5	  |   Monday	      | 0-53   | with a Monday in this year          | 
  |_______|___________________|________|_____________________________________|
  |  6	  |   Sunday	      | 1-53   | with more than 3 days this year     |
  |_______|___________________|________|_____________________________________|
  |  7	  |   Monday	      | 1-53   | with a Monday in this year          |
  |_______|___________________|________|_____________________________________|

      
     mysql> SELECT WEEK('1998-02-20');
     +---------------------------------------------------------+
     | WEEK('1998-02-20')                                      |
     +---------------------------------------------------------+
     | 7                                                       |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)

    
       *** WEEKDAY(date) ***
           =============
  * Returns the weekday index for date (0 = Monday, 1 = Tuesday, . 6 = Sunday).
   
     mysql> SELECT WEEKDAY('1998-02-03 22:23:00');
     +---------------------------------------------------------+
     | WEEKDAY('1998-02-03 22:23:00')                          |
     +---------------------------------------------------------+
     | 1                                                       |
     +---------------------------------------------------------+
     1 row in set (0.00 sec)


      *** WEEKOFYEAR(date) ***
          ================
    ** Returns the calendar week of the date as a number in the range
       from 1 to 53.
     * WEEKOFYEAR() is a compatibility function that is equivalent to 
       WEEK(date,3).


      mysql> SELECT WEEKOFYEAR('1998-02-20');
      +---------------------------------------------------------+
      | WEEKOFYEAR('1998-02-20')                                |
      +---------------------------------------------------------+
      | 8                                                       |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)


      *** YEAR(date) ***
          ==========
   * Returns the year for date, in the range 1000 to 9999, or 0 for the
     .zero. date.
     
      mysql> SELECT YEAR('98-02-03');
      +---------------------------------------------------------+
      | YEAR('98-02-03')                                        |
      +---------------------------------------------------------+
      | 1998                                                    |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)



     *** YEARWEEK(date), YEARWEEK(date,mode) ***
         ===================================
   ** Returns the year and the week for a date. 
    * The mode argument works exactly like the mode argument to the
      WEEK() function. 
    * The year in the result may be different from the year in the date
      argument for the first and the last week of the year.

      mysql> SELECT YEARWEEK('1987-01-01');
      +---------------------------------------------------------+
      | YEAR('98-02-03')YEARWEEK('1987-01-01')                  |
      +---------------------------------------------------------+
      | 198653                                                  |
      +---------------------------------------------------------+
      1 row in set (0.00 sec)
  
  * "Note" − The week number is different from what the WEEK() function
    would return (0) for optional arguments 0 or 1, as WEEK() then
    returns the week in the context of the given year.
__________________________________________________
   SQL - Date Functions                           |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Date Functions
                                                                                        
2) Definition of SQL - Date Functions ?
---------------------------------------
*
 
3) What is SQL - Date Functions About ?
--------------------------------------
* 
*  

4) What does SQL - Date Functions Do ?
--------------------------------------
*
*

5) Advantages/Benefits of SQL - Date Functions :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Date Functions :
---------------------------------------------------
*
*
*  

7) Examples of SQL - Date Functions :
-------------------------------------
*
*
_______________________________________________________________________________

 14. <<<<<<<<< SQL - Temporary Tables >>>>>>>>>
   
  ** There are RDBMS, which support temporary tables.
   * Temporary Tables are a great feature that lets you 
     "store and process intermediate results" by using the same 
     selection, update, and join capabilities that you can use with typical
     SQL Server tables. 
   
  ** The temporary tables could be very useful in some cases to keep
     temporary data.
   * The most important thing that should be known for temporary tables is
     that they will be deleted when the current client session terminates.
  
  ** Temporary tables are available in MySQL version 3.23 onwards.
   * If you use an older version of MySQL than 3.23, you can't use
     temporary tables, but you can use "heap tables".
  
  ** As stated earlier, temporary tables will only last as long as the
     session is alive.
   * If you run the code in a PHP script, the temporary table will be
     destroyed automatically when the script finishes executing.
   * If you are connected to the MySQL database server through the
     MySQL client program, then the temporary table will
   * exist until you close the client or manually destroy the table.
   
             Example :
             ''''''''''
     * Here is an example showing you the usage of a temporary table :
_____________________________________________________________________________
 
   mysql> CREATE TEMPORARY TABLE SALESSUMMARY (
      -> product_name VARCHAR(50) NOT NULL
      -> , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00
      -> , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00
      -> , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0
   );
   Query OK, 0 rows affected (0.00 sec)

   mysql> INSERT INTO SALESSUMMARY
      -> (product_name, total_sales, avg_unit_price, total_units_sold)
      -> VALUES
      -> ('cucumber', 100.25, 90, 2);

   mysql> SELECT * FROM SALESSUMMARY;
   +--------------+-------------+----------------+------------------+
   | product_name | total_sales | avg_unit_price | total_units_sold |
   +--------------+-------------+----------------+------------------+
   | cucumber     |      100.25 |          90.00 |                2 |
   +--------------+-------------+----------------+------------------+
   1 row in set (0.00 sec)  
______________________________________________________________________________


   ** When you issue a SHOW TABLES command, then your temporary table
      will not be listed out in the list.
    * Now, if you log out of the MySQL session and then issue a SELECT
      command, you will find no data available in the database. 
    * Even your temporary table will not be existing.
   
        *** Dropping Temporary Tables ***
            =========================
   ** By default, all the temporary tables are deleted by MySQL when
      your database connection gets terminated.
    * Still if you want to delete them in between, then you can do so
      by issuing a DROP TABLE command.
    
    * Following is an example on dropping a temporary table :

____________________________________________________________________________

    mysql> CREATE TEMPORARY TABLE SALESSUMMARY (
       -> product_name VARCHAR(50) NOT NULL
       -> , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00
       -> , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00
       -> , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0
    );
    Query OK, 0 rows affected (0.00 sec)

    mysql> INSERT INTO SALESSUMMARY
       -> (product_name, total_sales, avg_unit_price, total_units_sold)
       -> VALUES
       -> ('cucumber', 100.25, 90, 2);

    mysql> SELECT * FROM SALESSUMMARY;
    +--------------+-------------+----------------+------------------+
    | product_name | total_sales | avg_unit_price | total_units_sold |
    +--------------+-------------+----------------+------------------+
    | cucumber     |      100.25 |          90.00 |                2 |
    +--------------+-------------+----------------+------------------+
    1 row in set (0.00 sec)
    mysql> DROP TABLE SALESSUMMARY;
    mysql>  SELECT * FROM SALESSUMMARY;
    ERROR 1146: Table 'TUTORIALS.SALESSUMMARY' doesn't exist  
______________________________________________________________________________


__________________________________________________
                                                  |
          SQL - Temporary Tables                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Temporary Tables
                                                                                        
2) Definition of SQL - Temporary Tables ?
-----------------------------------------
*
 
3) What is SQL - Temporary Tables About ?
-----------------------------------------
*
*

4) What does SQL - Temporary Tables Do ?
----------------------------------------
*
*

5) Advantages/Benefits of SQL - Temporary Tables :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Temporary Tables :
-----------------------------------------------------
*
*
*  

7) Examples of SQL - Temporary Tables :
---------------------------------------
*
*
_______________________________________________________________________________

 15. <<<<<<<<< SQL - Clone Tables >>>>>>>>>
  
    ** There may be a situation when you need an exact copy of a table
     * and the CREATE TABLE ... or the SELECT... commands does not
       suit your purposes because the copy must include the same indexes, 
       default values and so forth.
   
    * If you are using "MySQL RDBMS", you can handle this situation by
      adhering to the steps given below −
        
       a) Use SHOW CREATE TABLE command to get a CREATE
          TABLE statement that specifies the source table's structure,
          indexes and all.
       
       b) Modify the statement to change the table name to that of the
          clone table and execute the statement.
          This way you will have an exact clone table.
  
       c) Optionally, if you need the table contents copied as well, issue
          an INSERT INTO or a SELECT statement too.
 
           Example -
           ''''''''''
    * Try out the following example to create a clone table for
      "TUTORIALS_TBL" whose structure is as follows −
       ''''''''''''''
     'Step 1' − Get the complete structure about the table.
      ''''''
______________________________________________________________________________
  
       SQL> SHOW CREATE TABLE TUTORIALS_TBL \G; 
       *************************** 1. row *************************** 
             Table: TUTORIALS_TBL 
       Create Table: CREATE TABLE 'TUTORIALS_TBL' ( 
         'tutorial_id' int(11) NOT NULL auto_increment, 
         'tutorial_title' varchar(100) NOT NULL default '', 
         'tutorial_author' varchar(40) NOT NULL default '', 
         'submission_date' date default NULL, 
         PRIMARY KEY  ('tutorial_id'), 
         UNIQUE KEY 'AUTHOR_INDEX' ('tutorial_author') 
       ) TYPE = MyISAM 
       1 row in set (0.00 sec)

______________________________________________________________________________

    'Step 2' − Rename this table and create another table.
     ''''''
______________________________________________________________________________

      SQL> CREATE TABLE `CLONE_TBL` ( 
        -> 'tutorial_id' int(11) NOT NULL auto_increment, 
        -> 'tutorial_title' varchar(100) NOT NULL default '', 
        -> 'tutorial_author' varchar(40) NOT NULL default '', 
        -> 'submission_date' date default NULL, 
        -> PRIMARY KEY  (`tutorial_id'), 
        -> UNIQUE KEY 'AUTHOR_INDEX' ('tutorial_author') 
      -> ) TYPE = MyISAM; 
      Query OK, 0 rows affected (1.80 sec) 

_____________________________________________________________________________

  'Step 3' − After executing step 2, you will clone a table in your database. 
   ''''''    If you want to copy data from an old table, then you can
             do it by using the INSERT INTO... SELECT statement.
_____________________________________________________________________________

      SQL> INSERT INTO CLONE_TBL (tutorial_id, 
         ->                        tutorial_title, 
         ->                        tutorial_author, 
         ->                        submission_date) 
         -> SELECT tutorial_id,tutorial_title, 
         ->        tutorial_author,submission_date, 
         -> FROM TUTORIALS_TBL; 
      Query OK, 3 rows affected (0.07 sec) 
      Records: 3  Duplicates: 0  Warnings: 0 
_____________________________________________________________________________

  * Finally, you will have an exact clone table as you wanted to have.
 
__________________________________________________
                                                  |
           SQL - Clone Tables                     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Clone Tables
                                                                                        
2) Definition of SQL - Clone Tables ?
-------------------------------------
*
 
3) What is SQL - Clone Tables About ?
-------------------------------------
*
*

4) What does SQL - Clone Tables Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Clone Tables :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Clone Tables :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Clone Tables :
-----------------------------------
*
*
_______________________________________________________________________________

 16. <<<<<<<<< SQL - Sub Queries >>>>>>>>>

   ** A Subquery or Inner query or a Nested query is a query within another
      SQL query and embedded within the WHERE clause.
   
   ** A subquery is used to return data that will be used in the main query
      as a condition to further restrict the data to be retrieved.
   
   ** Subqueries can be used with the SELECT, INSERT, UPDATE, and
      DELETE statements along with the operators like
      =, <, >, >=, <=, IN, BETWEEN, etc. 
    
       There are a few rules that "subqueries" must follow − 
       ''''''''''''''''''''''''''''"""""""""""'''''''''''''''
   
    a) Subqueries must be enclosed within parentheses.
     
    b) A subquery can have only one column in the SELECT clause,
       unless multiple columns are in the main query for the subquery
       to compare its selected columns.
  
    c) Subqueries can be used with the SELECT, INSERT, UPDATE, and
       although the main query can use an ORDER BY.
       The GROUP BY command can be used to perform the same function
       as the ORDER BY in a subquery.
    
    d) Subqueries that return more than one row can only be used  
       with multiple value operators such as the IN operator.
    
    e) The SELECT list cannot include any references to values that
       evaluate to a BLOB, ARRAY, CLOB, or NCLOB.
   
    f) A subquery cannot be immediately enclosed in a set function.
   
    g) The BETWEEN operator cannot be used with a subquery.
       However, the BETWEEN operator can be used within the
       subquery. 

  
      *** Subqueries with the SELECT Statement ***
          ====================================
   * Subqueries are most frequently used with the SELECT statement.
   * The Basic Syntax is as follows -
  _____________________________________________
 | 
 |  SELECT column_name [, column_name ]
 |  FROM   table1 [, table2 ]
 |  WHERE  column_name OPERATOR
 |     (SELECT column_name [, column_name ]
 |     FROM table1 [, table2 ]
 |     [WHERE])
 |________________________________________________

       Example -
       ''''''''''
    Consider the CUSTOMERS table having the following records −
     
      +----+----------+-----+-----------+----------+
      | ID | NAME     | AGE | ADDRESS   | SALARY   |
      +----+----------+-----+-----------+----------+
      |  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |
      |  2 | Khilan   |  25 | Delhi     |  1500.00 |
      |  3 | kaushik  |  23 | Kota      |  2000.00 |
      |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
      |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
      |  6 | Komal    |  22 | MP        |  4500.00 |
      |  7 | Muffy    |  24 | Indore    | 10000.00 |
      +----+----------+-----+-----------+----------+
  
   Now, let us check the following subquery with a SELECT statement.
    
   _________________________________________
  |  SQL> SELECT * 
  |     FROM CUSTOMERS 
  |     WHERE ID IN (SELECT ID 
  |           FROM CUSTOMERS 
  |           WHERE SALARY > 4500) ; 
  |_________________________________________
   
     This would produce the following result.
    
     +----+----------+-----+---------+----------+
     | ID | NAME     | AGE | ADDRESS | SALARY   |
     +----+----------+-----+---------+----------+
     |  4 | Chaitali |  25 | Mumbai  |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal  |  8500.00 |
     |  7 | Muffy    |  24 | Indore  | 10000.00 |
     +----+----------+-----+---------+----------+


     *** Subqueries with the INSERT Statement ***
         ====================================
   ** Subqueries also can be used with INSERT statements.
    * The INSERT statement uses the data returned from the subquery to 
      insert into another table.
    * The selected data in the subquery can be modified with any of the   
      character,  date or number functions.
   
     * The Basic Syntax is as follows -

    ________________________________________________________
   |
   |  INSERT INTO table_name [ (column1 [, column2 ]) ]
   |     SELECT [ *|column1 [, column2 ]
   |     FROM table1 [, table2 ]
   |     [ WHERE VALUE OPERATOR ]
   |________________________________________________________
 
         Example -
         '''''''''''
   ** Consider a table CUSTOMERS_BKP with similar structure as
      CUSTOMERS table.
    * Now to copy the complete CUSTOMERS table into the CUSTOMERS_BKP table,
      you can use the following syntax -

    __________________________________________
   | 
   |  SQL> INSERT INTO CUSTOMERS_BKP
   |     SELECT * FROM CUSTOMERS 
   |     WHERE ID IN (SELECT ID 
   |     FROM CUSTOMERS) ;
   |__________________________________________


     *** Subqueries with the UPDATE Statement ***
         ====================================
  ** The subquery can be used in conjunction with the UPDATE statement.
   * Either single or multiple columns in a table can be updated when
     using a subquery with the UPDATE statement.
  
       The basic syntax is as follows -
           ''''''''''''
     ______________________________________
    |
    |  UPDATE table
    |  SET column_name = new_value
    |  [ WHERE OPERATOR [ VALUE ]
    |     (SELECT COLUMN_NAME
    |     FROM TABLE_NAME)
    |     [ WHERE) ]
    |_______________________________________
  
         Example -
         ''''''''''
  ** Assuming, we have CUSTOMERS_BKP table available which is backup of
     CUSTOMERS table.
   * The following example updates SALARY by 0.25 times in the
     CUSTOMERS table for all the customers whose AGE is greater than or
     equal to 27. 
    
   _____________________________________________________
  | 
  |  SQL> UPDATE CUSTOMERS
  |     SET SALARY = SALARY * 0.25
  |     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP
  |        WHERE AGE >= 27 );
  |_____________________________________________________
  
    * This would impact two rows and finally CUSTOMERS table would
      have the following records :

    +----+----------+-----+-----------+----------+
    | ID | NAME     | AGE | ADDRESS   | SALARY   |
    +----+----------+-----+-----------+----------+
    |  1 | Ramesh   |  35 | Ahmedabad |   125.00 |
    |  2 | Khilan   |  25 | Delhi     |  1500.00 |
    |  3 | kaushik  |  23 | Kota      |  2000.00 |
    |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
    |  5 | Hardik   |  27 | Bhopal    |  2125.00 |
    |  6 | Komal    |  22 | MP        |  4500.00 |
    |  7 | Muffy    |  24 | Indore    | 10000.00 |
    +----+----------+-----+-----------+----------+

      *** Subqueries with the DELETE Statement ***
          ====================================
   * The subquery can be used in conjunction with the DELETE statement
     like with any other statements mentioned above.
     
       * The basic syntax is as follows -
    
    ______________________________________
   |  DELETE FROM TABLE_NAME
   |  [ WHERE OPERATOR [ VALUE ]
   |     (SELECT COLUMN_NAME
   |     FROM TABLE_NAME)
   |     [ WHERE) ]
   |______________________________________
  
        Example -
        '''''''''''
    ** Assuming, we have a CUSTOMERS_BKP table available which is a 
       backup of the CUSTOMERS table.
     * The following example deletes the records from the CUSTOMERS table
       for all the customers whose AGE is greater than or equal to 27.
       
    ______________________________________________________
   |
   |  SQL> DELETE FROM CUSTOMERS
   |     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP
   |        WHERE AGE >= 27 );
   |______________________________________________________
    
     * This would impact two rows and finally the CUSTOMERS table
       would have the following records :

    +----+----------+-----+---------+----------+
    | ID | NAME     | AGE | ADDRESS | SALARY   |
    +----+----------+-----+---------+----------+
    |  2 | Khilan   |  25 | Delhi   |  1500.00 |
    |  3 | kaushik  |  23 | Kota    |  2000.00 |
    |  4 | Chaitali |  25 | Mumbai  |  6500.00 |
    |  6 | Komal    |  22 | MP      |  4500.00 |
    |  7 | Muffy    |  24 | Indore  | 10000.00 |
    +----+----------+-----+---------+----------+
__________________________________________________
                                                  |
       SQL - Sub Queries                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Sub Queries
                                                                                        
2) Definition of SQL - Sub Queries ?
------------------------------------
*
 
3) What is SQL - Sub Queries About ?
------------------------------------
*
*

4) What does SQL - Sub Queries Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Sub Queries :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Sub Queries :
------------------------------------------------
*
*
*  

7) Examples of SQL - Sub Queries :
----------------------------------
*
*
_______________________________________________________________________________

 17. <<<<<<<<< SQL - Using Sequences >>>>>>>>>
    
  ** A sequence is a set of integers 1, 2, 3, ... that are generated in
     order on demand. 
   * Sequences are frequently used in databases because many applications
     require each row in a table to contain a unique value and sequences
     provide an easy way to generate 

   * This chapter describes how to use sequences in MySQL.
       
      *** Using AUTO_INCREMENT column ***
          ===========================
   * The simplest way in MySQL to use sequences is to define a column
     as AUTO_INCREMENT and leave the rest to MySQL to take care.
   
          Example -
          ''''''''''
    * Try out the following example.
    * This will 'create a table' and after that it will 'insert a few rows'
      in this table where it is not required to give a record ID because
      its auto-incremented by MySQL.

______________________________________________________________________
      
      mysql> CREATE TABLE INSECT
         -> (
         -> id INT UNSIGNED NOT NULL AUTO_INCREMENT,
         -> PRIMARY KEY (id),
         -> name VARCHAR(30) NOT NULL, # type of insect
         -> date DATE NOT NULL, # date collected
         -> origin VARCHAR(30) NOT NULL # where collected
      );
      Query OK, 0 rows affected (0.02 sec)
      mysql> INSERT INTO INSECT (id,name,date,origin) VALUES
         -> (NULL,'housefly','2001-09-10','kitchen'),
         -> (NULL,'millipede','2001-09-10','driveway'),
         -> (NULL,'grasshopper','2001-09-10','front yard');
      Query OK, 3 rows affected (0.02 sec)
      Records: 3  Duplicates: 0  Warnings: 0
      mysql> SELECT * FROM INSECT ORDER BY id;
      +----+-------------+------------+------------+
      | id | name        | date       | origin     |
      +----+-------------+------------+------------+
      |  1 | housefly    | 2001-09-10 | kitchen    |
      |  2 | millipede   | 2001-09-10 | driveway   |
      |  3 | grasshopper | 2001-09-10 | front yard |
      +----+-------------+------------+------------+
      3 rows in set (0.00 sec)
________________________________________________________________________

      *** Obtain AUTO_INCREMENT Values ***
          ============================
   * The LAST_INSERT_ID( ) is an SQL function, so you can use it from
     within any client that understands how to issue SQL statements.
   * Otherwise PERL and PHP scripts provide exclusive functions to
     retrieve auto-incremented value of last record.
         
        PERL Example - 
        ```````````````
  ** Use the "mysql_insertid" attribute to obtain the AUTO_INCREMENT
     value generated by a query.
   * This attribute is accessed through either a database handle or a
     statement handle, depending on how you issue the query.
   * The following example references it through the database handle.
    
    ________________________________________________________
   |
   |  $dbh->do ("INSERT INTO INSECT (name,date,origin)
   |  VALUES('moth','2001-09-14','windowsill')");
   |  my $seq = $dbh->{mysql_insertid}; 
   |________________________________________________________

        PHP Example -
        ```````````````
   * After issuing a query that generates an AUTO_INCREMENT value,
     retrieve the value by calling the mysql_insert_id( ) function.
                                       ''''''''''''''''''
   _________________________________________________________________
  |
  |   mysql_query ("INSERT INTO INSECT (name,date,origin)
  |   VALUES('moth','2001-09-14','windowsill')", $conn_id);
  |   $seq = mysql_insert_id ($conn_id); 
  |_________________________________________________________________
 
       *** Renumbering an Existing Sequence ***
           ================================
   ** There may be a case when you have deleted many records from a
      table and you want to re-sequence all the records.
    * This can be done by using a simple trick, but you should be very
      careful to do this and check if your table is having a join with
      another table or not. 
   
   ** If you determine that resequencing an AUTO_INCREMENT column is
      unavoidable, the way to do it is to drop the column from the table,
      then add it again.
   
    * The following example shows how to renumber the id values
      in the insect table using this technique.
   
     ______________________________________________________________
    |
    |  mysql> ALTER TABLE INSECT DROP id;
    |  mysql> ALTER TABLE insect
    |     -> ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,
    |     -> ADD PRIMARY KEY (id);
    |_______________________________________________________________
 
     *** Starting a Sequence at a Particular Value ***
         =========================================
  * By default, MySQL will start the sequence from 1, but you can
    specify any other number as well at the time of table creation.

  * The following code block has an example where MySQL will start
    sequence from 100.
    ____________________________________________________________
   |  mysql> CREATE TABLE INSECT
   |     -> (
   |     -> id INT UNSIGNED NOT NULL AUTO_INCREMENT = 100,
   |     -> PRIMARY KEY (id),
   |     -> name VARCHAR(30) NOT NULL, # type of insect
   |     -> date DATE NOT NULL, # date collected
   |     -> origin VARCHAR(30) NOT NULL # where collected
   |  );
   |______________________________________________________________ 
 
    * Alternatively, you can create the table and then set the initial
      sequence value with ALTER TABLE.
    __________________________________________________
   |
   |  mysql> ALTER TABLE t AUTO_INCREMENT = 100;
   |__________________________________________________
__________________________________________________
                                                  |
       SQL - Using Sequences                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Using Sequences
                                                                                        
2) Definition of SQL - Using Sequences ?
-----------------------------------------
*
 
3) What is SQL - Using Sequences About ?
----------------------------------------
*
*

4) What does SQL - Using Sequences Do ?
---------------------------------------
*
*

5) Advantages/Benefits of SQL - Using Sequences :
-------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Using Sequences :
----------------------------------------------------
*
*
*  

7) Examples of SQL - Using Sequences :
--------------------------------------
*
*
_______________________________________________________________________________

 18. <<<<<<<<< SQL - Handling Duplicates >>>>>>>>>
     
     ** There may be a situation when you have multiple duplicate records
        in a table.
      * While fetching such records, it makes more sense to fetch only 
        unique records instead of fetching duplicate records. 
     
     ** The SQL DISTINCT keyword, which we have already discussed is used
        in conjunction with the SELECT statement to eliminate all the
        duplicate records and by fetching only the unique records.

           Syntax -
           ''''''''''
    * The basic syntax of a DISTINCT keyword to eliminate duplicate
      records is as follows -
     _________________________________________________________
    |
    |  SELECT DISTINCT column1, column2,.....columnN 
    |  FROM table_name
    |  WHERE [condition]
    |_________________________________________________________

          Example -
          ''''''''''
     +----+----------+-----+-----------+----------+
     | ID | NAME     | AGE | ADDRESS   | SALARY   |
     +----+----------+-----+-----------+----------+
     |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
     |  2 | Khilan   |  25 | Delhi     |  1500.00 |
     |  3 | kaushik  |  23 | Kota      |  2000.00 |
     |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
     |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
     |  6 | Komal    |  22 | MP        |  4500.00 |
     |  7 | Muffy    |  24 | Indore    | 10000.00 |
     +----+----------+-----+-----------+----------+

   * First, let us see how the following SELECT query returns duplicate
     salary records :
   __________________________________________
  |  SQL> SELECT SALARY FROM CUSTOMERS
  |     ORDER BY SALARY; 
  |__________________________________________

    * This would produce the following result where the salary of 2000 is
      coming twice which is a duplicate record from the original table.
    
    +----------+
    | SALARY   |
    +----------+
    |  1500.00 |
    |  2000.00 |
    |  2000.00 |
    |  4500.00 |
    |  6500.00 |
    |  8500.00 |
    | 10000.00 |
    +----------+
    
    * Now, let us use the DISTINCT keyword with the above SELECT
      query and see the result.
    
      ______________________________________________________
     |  SQL> SELECT DISTINCT SALARY FROM CUSTOMERS
     |     ORDER BY SALARY;
     |_______________________________________________________

    * This would produce the following result where we do not have any
      duplicate entry.

     +----------+
     | SALARY   |
     +----------+
     |  1500.00 |
     |  2000.00 |
     |  4500.00 |
     |  6500.00 |
     |  8500.00 |
     | 10000.00 |
     +----------+
__________________________________________________
                                                  |
        SQL - Handling Duplicates                 |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Handling Duplicates
                                                                                        
2) Definition of SQL - Handling Duplicates ?
--------------------------------------------
*
 
3) What is SQL - Handling Duplicates About ?
--------------------------------------------
*
*

4) What does SQL - Handling Duplicates Do ?
-------------------------------------------
*
*

5) Advantages/Benefits of SQL - Handling Duplicates :
-----------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Handling Duplicates :
--------------------------------------------------------
*
*
*  

7) Examples of SQL - Handling Duplicates :
------------------------------------------
*
*
_______________________________________________________________________________

 19. <<<<<<<<< SQL - Injection >>>>>>>>>

   ** If you take a user input through a webpage and insert it into a SQL
      database, there is a chance that you have left yourself wide
      open for a security issue known as the "SQL Injection".
    * This chapter will teach you how to help prevent this from happening
      and help you secure your scripts and SQL statements in your server
      side scripts such as a PERL Script. 
   
   ** Injection usually occurs when you ask a user for input,
      like their name and instead of a name they give you a SQL 
      statement that you will unknowingly run on your database.
    * Never trust user provided data, process this data only after 
      validation;  as a rule, this is done by "Pattern Matching".
                                               ````````````````
    * In the example below, the name is restricted to the alphanumerical
      characters plus underscore and to a length between 8 and 20 
      characters (modify these rules as needed).
    
    ______________________________________________________________________
   |
   |  if (preg_match("/^\w{8,20}$/", $_GET['username'], $matches)) {
   |     $result = mysql_query("SELECT * FROM CUSTOMERS 
   |        WHERE name = $matches[0]");
   |  } else {
   |     echo "user name not accepted";
   |  }
   |______________________________________________________________________
     
      * To demonstrate the problem, consider this excerpt −
     
     __________________________________________________________________
    |  // supposed input
    |  $name = "Qadir'; DELETE FROM CUSTOMERS;";
    |  mysql_query("SELECT * FROM CUSTOMSRS WHERE name='{$name}'");
    |___________________________________________________________________

 ** The function call is supposed to retrieve a record from the CUSTOMERS
    table where the name column matches the name specified by the user.
  * Under normal circumstances, $name would only contain alphanumeric  
    characters and perhaps spaces, such as the string ilia.
  * But here, by appending an entirely new query to $name, the call to the
    database turns into disaster; the injected DELETE query removes all 
    records from the CUSTOMERS table.
 
 ** Fortunately, if you use MySQL, the mysql_query() function does not 
    permit query stacking or executing multiple SQL queries in a single
    function call. If you try to stack queries, the call fails.
    
** However, other "PHP database extensions", such as "SQLite" and "PostgreSQL"
   happily perform stacked queries, executing all the queries provided
   in one string and creating a serious security problem. 
        
       *** Preventing SQL Injection ***
           ========================
** You can handle all escape characters smartly in scripting languages
   like PERL and PHP. 
 * The MySQL extension for PHP provides the function "mysql_real_escape_string()"
   to escape input characters that are special to MySQL.````````````````````````

    _______________________________________________________________________
   |  if (get_magic_quotes_gpc()) {
   |     $name = stripslashes($name);
   |  }
   |  $name = mysql_real_escape_string($name);
   |  mysql_query("SELECT * FROM CUSTOMERS WHERE name='{$name}'");
   |_______________________________________________________________________

      *** The LIKE Quandary ***
          =================
   ** To address the LIKE quandary, a custom escaping mechanism
      must convert user-supplied '%' and '_' characters to literals.
    * Use addcslashes(), a function that lets you specify a character 
      range to escape.
    ______________________________________________________________________
   |  $sub = addcslashes(mysql_real_escape_string("%str"), "%_");
   |  // $sub == \%str\_
   | mysql_query("SELECT * FROM messages 
   |    WHERE subject LIKE '{$sub}%'");
   |______________________________________________________________________

__________________________________________________
                                                  |
       SQL - Injection                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Injection
                                                                                        
2) Definition of SQL - Injection ?
----------------------------------
*
 
3) What is SQL - Injection About ?
----------------------------------
*
*

4) What does SQL - Injection Do ?
---------------------------------
*
*

5) Advantages/Benefits of SQL - Injection :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Injection :
----------------------------------------------
*
*
*  

7) Examples of SQL - Injection :
--------------------------------
*
*
_______________________________________________________________________________

 20. <<<<<<<<< SQL - Useful Functions >>>>>>>>>
  
    ** SQL has many built-in functions for performing processing on string
       or numeric data.
     * Following is the list of all useful SQL built-in functions −
    
      a) SQL COUNT Function -
      b) SQL MAX Function -
      c) SQL MIN Function -
      d) SQL AVG Function -
      e) SQL SUM Function -
      f) SQL SQRT Functions -
      g) SQL RAND Function -
      h) SQL CONCAT Function -
      i) SQL Numeric Function -
      j) SQL String Functions -
__________________________________________________
                                                  |
         SQL - Useful Functions                   |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Useful Functions
                                                                                        
2) Definition of SQL - Useful Functions ?
-----------------------------------------
*
 
3) What is SQL - Useful Functions About ?
-----------------------------------------
*
*

4) What does SQL - Useful Functions Do ?
----------------------------------------
*
*

5) Advantages/Benefits of SQL - Useful Functions :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Useful Functions :
-----------------------------------------------------
*
*
*  

7) Examples of SQL - Useful Functions :
---------------------------------------
*
*
_______________________________________________________________________________

 21. <<<<<<<<< SQL - Top Clause >>>>>>>>>
__________________________________________________
                                                  |
        SQL - Top Clause                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Top Clause
                                                                                        
2) Definition of SQL - Top Clause ?
-----------------------------------
*
 
3) What is SQL - Top Clause About ?
-----------------------------------
*
*

4) What does SQL - Top Clause Do ?
----------------------------------
*
*

5) Advantages/Benefits of SQL - Top Clause :
--------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Top Clause :
-----------------------------------------------
*
*
*  

7) Examples of SQL - Top Clause :
---------------------------------
*
*
________________________________________________________________________________

 22. <<<<<<<<< SQL - Order By >>>>>>>>>
__________________________________________________
                                                  |
        SQL - Order By                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Order By
                                                                                        
2) Definition of SQL - Order By ?
---------------------------------
*
 
3) What is SQL - Order By About ?
---------------------------------
*
*

4) What does SQL - Order By Do ?
--------------------------------
*
*

5) Advantages/Benefits of SQL - Order By :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Order By :
---------------------------------------------
*
*
*  

7) Examples of SQL - Order By :
-------------------------------
*
*
_______________________________________________________________________________

 23. <<<<<<<<< SQL - Group By >>>>>>>>>
__________________________________________________
                                                  |
       SQL - Group By                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Group By
                                                                                        
2) Definition of SQL - Group By ?
---------------------------------
*
 
3) What is SQL - Group By About ?
---------------------------------
*
*

4) What does SQL - Group By Do ?
--------------------------------
*
*

5) Advantages/Benefits of SQL - Group By :
------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Group By :
---------------------------------------------
*
*
*  

7) Examples of SQL - Group By :
-------------------------------
*
*
_______________________________________________________________________________

 24. <<<<<<<<< SQL - Distinct Keyword >>>>>>>>>
__________________________________________________
                                                  |
     SQL - Distinct Keyword                       |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Distinct Keyword
                                                                                        
2) Definition of SQL - Distinct Keyword ?
-----------------------------------------
*
 
3) What is SQL - Distinct Keyword About ?
-----------------------------------------
*
*

4) What does SQL - Distinct Keyword Do ?
----------------------------------------
*
*

5) Advantages/Benefits of SQL - Distinct Keyword :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Distinct Keyword :
-----------------------------------------------------
*
*
*  

7) Examples of SQL - Distinct Keyword :
---------------------------------------
*
*
_______________________________________________________________________________

 25. <<<<<<<<< SQL - Sorting Results >>>>>>>>>
__________________________________________________
                                                  |
   SQL - Sorting Results                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Sorting Results
                                                                                        
2) Definition of SQL - Sorting Results ?
----------------------------------------
*
 
3) What is SQL - Sorting Results About ?
----------------------------------------
*
*

4) What does SQL - Sorting Results Do ?
---------------------------------------
*
*

5) Advantages/Benefits of SQL - Sorting Results :
-------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Sorting Results :
----------------------------------------------------
*
*
*  

7) Examples of SQL - Sorting Results :
--------------------------------------
*
*
________________________________________________________________________________

        ** Advanced SQL **
           ============
           ============
 1. <<<<<<<<< SQL - Constraints >>>>>>>>>
__________________________________________________
    SQL - Constraints                             |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Constraints
                                                                                        
2) Definition of SQL - Constraints ?
------------------------------------
*
 
3) What is SQL - Constraints About ?
------------------------------------
*
*

4) What does SQL - Constraints Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Constraints :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Constraints :
------------------------------------------------
*
*
*  

7) Examples of SQL - Constraints :
----------------------------------
*
*
_______________________________________________________________________________

 2. <<<<<<<<< SQL - Using Joins >>>>>>>>>
__________________________________________________
                                                  |
      SQL - Using Joins                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Using Joins
                                                                                        
2) Definition of SQL - Using Joins ?
------------------------------------
*
 
3) What is SQL - Using Joins About ?
------------------------------------
*
*

4) What does SQL - Using Joins Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Using Joins :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Using Joins :
------------------------------------------------
*
*
*  

7) Examples of SQL - Using Joins :
----------------------------------
*
*
_______________________________________________________________________________

 3. <<<<<<<<< SQL - Unions Clause >>>>>>>>>
__________________________________________________
                                                  |
       SQL - Unions Clause                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Unions Clause
                                                                                        
2) Definition of SQL - Unions Clause ?
--------------------------------------
*
 
3) What is SQL - Unions Clause About ?
--------------------------------------
*
*

4) What does SQL - Unions Clause Do ?
-------------------------------------
*
*

5) Advantages/Benefits of SQL - Unions Clause :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Unions Clause :
--------------------------------------------------
*
*
*  

7) Examples of SQL - Unions Clause :
------------------------------------
*
*
_______________________________________________________________________________

 4. <<<<<<<<< SQL - NULL Values >>>>>>>>>
__________________________________________________
                                                  |
      SQL - NULL Values                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - NULL Values
                                                                                        
2) Definition of SQL - NULL Values ?
------------------------------------
*
 
3) What is SQL - NULL Values About ?
------------------------------------
*
*

4) What does SQL - NULL Values Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - NULL Values :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - NULL Values :
------------------------------------------------
*
*
*  

7) Examples of SQL - NULL Values :
----------------------------------
*
*
_______________________________________________________________________________

 5. <<<<<<<<< SQL - Alias Syntax >>>>>>>>>
__________________________________________________
                                                  |
      SQL - Alias Syntax                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Alias Syntax
                                                                                        
2) Definition of SQL - Alias Syntax ?
-------------------------------------
*
 
3) What is SQL - Alias Syntax About ?
-------------------------------------
*
*

4) What does SQL - Alias Syntax Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Alias Syntax :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Alias Syntax :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Alias Syntax :
-----------------------------------
*
*
________________________________________________________________________________

 6. <<<<<<<<< SQL - Indexes >>>>>>>>>
__________________________________________________
                                                  |
      SQL - Indexes                               |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Indexes
                                                                                        
2) Definition of SQL - Indexes ?
--------------------------------
*
 
3) What is SQL - Indexes About ?
--------------------------------
*
*

4) What does SQL - Indexes Do ?
-------------------------------
*
*

5) Advantages/Benefits of SQL - Indexes :
-----------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Indexes :
--------------------------------------------
*
*
*  

7) Examples of SQL - Indexes :
------------------------------
*
*
_______________________________________________________________________________

 7. <<<<<<<<< SQL - Alter Command >>>>>>>>>
__________________________________________________
                                                  |
      SQL - Alter Command                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Alter Command
                                                                                        
2) Definition of SQL - Alter Command ?
--------------------------------------
*
 
3) What is SQL - Alter Command About ?
--------------------------------------
*
*

4) What does SQL - Alter Command Do ?
-------------------------------------
*
*

5) Advantages/Benefits of SQL - Alter Command :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Alter Command :
--------------------------------------------------
*
*
*  

7) Examples of SQL - Alter Command :
------------------------------------
*
*
_______________________________________________________________________________

 8. <<<<<<<<< SQL - Truncate Table >>>>>>>>>
__________________________________________________
                                                  |
      SQL - Truncate Table                        |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Truncate Table
                                                                                        
2) Definition of SQL - Truncate Table ?
---------------------------------------
*
 
3) What is SQL - Truncate Table About ?
---------------------------------------
*
*

4) What does SQL - Truncate Table Do ?
--------------------------------------
*
*

5) Advantages/Benefits of SQL - Truncate Table :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Truncate Table :
---------------------------------------------------
*
*
*  

7) Examples of SQL - Truncate Table :
-------------------------------------
*
*
_______________________________________________________________________________

 9. <<<<<<<<< SQL - Using Views >>>>>>>>>
__________________________________________________
                                                  |
      SQL - Using Views                           |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Using Views
                                                                                        
2) Definition of SQL - Using Views ?
------------------------------------
*
 
3) What is SQL - Using Views About ?
------------------------------------
*
*

4) What does SQL - Using Views Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Using Views :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Using Views :
------------------------------------------------
*
*
*  

7) Examples of SQL - Using Views :
----------------------------------
*
*
_______________________________________________________________________________

 10. <<<<<<<<< SQL - Having Clause >>>>>>>>>
__________________________________________________
                                                  |
        SQL - Having Clause                       |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Having Clause
                                                                                        
2) Definition of SQL - Having Clause ?
--------------------------------------
*
 
3) What is SQL - Having Clause About ?
--------------------------------------
*
*

4) What does SQL - Having Clause Do ?
-------------------------------------
*
*

5) Advantages/Benefits of SQL - Having Clause :
-----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Having Clause :
--------------------------------------------------
*
*
*  

7) Examples of SQL - Having Clause :
------------------------------------
*
*
_______________________________________________________________________________
        
 11. <<<<<<<<< SQL - Transactions >>>>>>>>>
__________________________________________________
                                                  |
       SQL - Transactions                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Transactions
                                                                                        
2) Definition of SQL - Transactions ?
-------------------------------------
*
 
3) What is SQL - Transactions About ?
-------------------------------------
*
*

4) What does SQL - Transactions Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Transactions :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Transactions :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Transactions :
-----------------------------------
*
*
_______________________________________________________________________________

 12. <<<<<<<<< SQL - Wildcards >>>>>>>>>
__________________________________________________
                                                  |
      SQL - Wildcards                             |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Wildcards
                                                                                        
2) Definition of SQL - Wildcards ?
----------------------------------
*
 
3) What is SQL - Wildcards About ?
----------------------------------
*
*

4) What does SQL - Wildcards Do ?
---------------------------------
*
*

5) Advantages/Benefits of SQL - Wildcards :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Wildcards :
----------------------------------------------
*
*
*  

7) Examples of SQL - Wildcards :
--------------------------------
*
*
_______________________________________________________________________________

 13. <<<<<<<<< SQL - Date Functions >>>>>>>>>
__________________________________________________
    SQL - Date Functions                          |
                                                  |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Date Functions
                                                                                        
2) Definition of SQL - Date Functions ?
---------------------------------------
*
 
3) What is SQL - Date Functions About ?
---------------------------------------
*
*

4) What does SQL - Date Functions Do ?
--------------------------------------
*
*

5) Advantages/Benefits of SQL - Date Functions :
------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Date Functions :
---------------------------------------------------
*
*
*  

7) Examples of SQL - Date Functions :
-------------------------------------
*
*
_______________________________________________________________________________

 14. <<<<<<<<< SQL - Temporary Tables >>>>>>>>>
__________________________________________________
                                                  |
       SQL - Temporary Tables                     |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Temporary Tables
                                                                                        
2) Definition of SQL - Temporary Tables ?
-----------------------------------------
*
 
3) What is SQL - Temporary Tables About ?
-----------------------------------------
*   
* 

4) What does SQL - Temporary Tables Do ?
----------------------------------------
*
*

5) Advantages/Benefits of SQL - Temporary Tables :
--------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Temporary Tables :
-----------------------------------------------------
*
*
*  

7) Examples of SQL - Temporary Tables :
---------------------------------------
*
*
_______________________________________________________________________________

 15. <<<<<<<<< SQL - Clone Tables >>>>>>>>>
__________________________________________________
                                                  |
       SQL - Clone Tables                         |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Clone Tables
                                                                                        
2) Definition of SQL - Clone Tables ?
-------------------------------------
*
 
3) What is SQL - Clone Tables About ?
-------------------------------------
*
*

4) What does SQL - Clone Tables Do ?
------------------------------------
*
*

5) Advantages/Benefits of SQL - Clone Tables :
----------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Clone Tables :
-------------------------------------------------
*
*
*  

7) Examples of SQL - Clone Tables :
-----------------------------------
*
*
________________________________________________________________________________

 16. <<<<<<<<< SQL - Sub Queries >>>>>>>>>
__________________________________________________
                                                  |
       SQL - Sub Queries                          |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Sub Queries
                                                                                        
2) Definition of SQL - Sub Queries ?
------------------------------------
*
 
3) What is SQL - Sub Queries About ?
------------------------------------
*
*

4) What does SQL - Sub Queries Do ?
-----------------------------------
*
*

5) Advantages/Benefits of SQL - Sub Queries :
---------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Sub Queries :
------------------------------------------------
*
*
*  

7) Examples of SQL - Sub Queries :
----------------------------------
*
*
_______________________________________________________________________________

 17. <<<<<<<<< SQL - Using Sequences >>>>>>>>>
__________________________________________________
                                                  |
       SQL - Using Sequences                      |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Using Sequences
                                                                                        
2) Definition of SQL - Using Sequences ?
----------------------------------------
*
 
3) What is SQL - Using Sequences About ?
----------------------------------------
*
*

4) What does SQL - Using Sequences Do ?
---------------------------------------
*
*

5) Advantages/Benefits of SQL - Using Sequences :
-------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Using Sequences :
----------------------------------------------------
*
*
*  

7) Examples of SQL - Using Sequences :
--------------------------------------
*
*
_______________________________________________________________________________

 18. <<<<<<<<< SQL - Handling Duplicates >>>>>>>>>
__________________________________________________
                                                  |
        SQL - Handling Duplicates                 |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Handling Duplicates
                                                                                        
2) Definition of SQL - Handling Duplicates ?
--------------------------------------------
*
 
3) What is SQL - Handling Duplicates About ?
--------------------------------------------
*
*

4) What does SQL - Handling Duplicates Do ?
-------------------------------------------
*
* 

5) Advantages/Benefits of SQL - Handling Duplicates :
-----------------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Handling Duplicates :
--------------------------------------------------------
*
*
*  

7) Examples of SQL - Handling Duplicates :
------------------------------------------
*
*
________________________________________________________________________________

 19. <<<<<<<<< SQL - Injection >>>>>>>>>
__________________________________________________
                                                  |
       SQL - Injection                            |                  
__________________________________________________|
            |
            |
1) What's the Heading ?
-----------------------
* SQL - Injection
                                                                                        
2) Definition of SQL - Injection ?
----------------------------------
*
 
3) What is SQL - Injection About ?
----------------------------------
*
*

4) What does SQL - Injection Do ?
---------------------------------
*
*

5) Advantages/Benefits of SQL - Injection :
-------------------------------------------
*
*
*

6) Disadvantages/Drawback of SQL - Injection :
----------------------------------------------
*
*
*  

7) Examples of SQL - Injection :
--------------------------------
*
*
_______________________________________________________________________________